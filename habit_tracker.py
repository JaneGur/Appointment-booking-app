import streamlit as st
from datetime import datetime, timedelta
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import hashlib
import re
import os
import requests
import threading
from supabase import create_client, Client
from dotenv import load_dotenv
import time

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ö–û–ù–°–¢–ê–ù–¢–´
# ============================================================================

PAGE_CONFIG = {
    "page_title": "–ü—Å–∏—Ö–æ–ª–æ–≥ | –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏",
    "page_icon": "üåø",
    "layout": "wide",
    "initial_sidebar_state": "expanded"
}

ADMIN_PASSWORD_HASH = "240be518fabd2724ddb6f04eeb1da5967448d7e831c08c8fa822809f74c720a9"  # admin123

BOOKING_RULES = {
    "MIN_ADVANCE_HOURS": 1,
    "MIN_CANCEL_MINUTES": 30,
    "MAX_DAYS_AHEAD": 30,
}

STATUS_DISPLAY = {
    'confirmed': {'emoji': '‚úÖ', 'text': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', 'color': '#88c8bc', 'bg_color': '#f0f9f7'},
    'cancelled': {'emoji': '‚ùå', 'text': '–û—Ç–º–µ–Ω–µ–Ω–∞', 'color': '#ff6b6b', 'bg_color': '#fff5f5'},
    'completed': {'emoji': '‚úÖ', 'text': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞', 'color': '#6ba292', 'bg_color': '#f0f9f7'}
}

WEEKDAY_MAP = {
    '0': '–í—Å', '1': '–ü–Ω', '2': '–í—Ç', 
    '3': '–°—Ä', '4': '–ß—Ç', '5': '–ü—Ç', '6': '–°–±'
}

TELEGRAM_CONFIG = {
    'bot_token': os.getenv('TELEGRAM_BOT_TOKEN', ''),
    'admin_chat_id': os.getenv('TELEGRAM_ADMIN_CHAT_ID', ''),
    'bot_username': os.getenv('TELEGRAM_BOT_USERNAME', 'Jenyhelperbot'),
    'enabled': True
}

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SUPABASE
# ============================================================================

@st.cache_resource
def init_supabase():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Supabase"""
    try:
        supabase_url = os.getenv('SUPABASE_URL')
        supabase_key = os.getenv('SUPABASE_KEY')
        
        if not supabase_url or not supabase_key:
            st.error("‚ùå SUPABASE_URL –∏ SUPABASE_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return None
            
        return create_client(supabase_url, supabase_key)
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        return None

# ============================================================================
# –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–¢–ò–õ–ò–ó–ê–¶–ò–Ø –° –ê–ù–ò–ú–ê–¶–ò–Ø–ú–ò –ò MODERN UI
# ============================================================================

def load_custom_css():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö CSS —Å—Ç–∏–ª–µ–π —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏"""
    st.markdown("""
        <style>
        /* ===== –û–ë–©–ò–ï –°–¢–ò–õ–ò ===== */
        .main {
            padding: 0rem 1rem;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        }
        
        /* ===== –ö–ù–û–ü–ö–ò –° –£–õ–£–ß–®–ï–ù–ù–û–ô –ê–ù–ò–ú–ê–¶–ò–ï–ô ===== */
        .stButton>button {
            width: 100%;
            border-radius: 12px;
            height: 3.2em;
            background: linear-gradient(135deg, #88c8bc 0%, #6ba292 100%);
            color: white;
            font-weight: 600;
            border: none;
            box-shadow: 0 4px 15px rgba(136, 200, 188, 0.3);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            font-size: 1rem;
            position: relative;
            overflow: hidden;
        }
        
        .stButton>button::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            transform: translate(-50%, -50%);
            transition: width 0.6s, height 0.6s;
        }
        
        .stButton>button:hover::before {
            width: 300px;
            height: 300px;
        }
        
        .stButton>button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(136, 200, 188, 0.5);
            background: linear-gradient(135deg, #6ba292 0%, #88c8bc 100%);
        }
        
        .stButton>button:active {
            transform: translateY(0);
            box-shadow: 0 4px 15px rgba(136, 200, 188, 0.3);
        }
        
        /* ===== –ö–ê–†–¢–û–ß–ö–ò –ó–ê–ü–ò–°–ï–ô ===== */
        .booking-card {
            padding: 2rem;
            border-radius: 20px;
            background: rgba(255, 255, 255, 0.98);
            margin-bottom: 1.5rem;
            border-left: 5px solid #88c8bc;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .booking-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(136, 200, 188, 0.1), transparent);
            transition: left 0.5s;
        }
        
        .booking-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.12);
        }
        
        .booking-card:hover::before {
            left: 100%;
        }
        
        /* ===== –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ü–ê–ù–ï–õ–ò ===== */
        .info-box {
            background: white;
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
            border-left: 5px solid #88c8bc;
            transition: all 0.3s ease;
            animation: fadeInUp 0.5s ease-out;
        }
        
        .info-box:hover {
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.12);
        }
        
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        /* ===== –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–´–ô –•–ï–î–ï–† ===== */
        .welcome-header {
            background: linear-gradient(135deg, #88c8bc 0%, #a8d5ba 100%);
            color: white;
            padding: 3rem 2rem;
            border-radius: 20px;
            margin-bottom: 2rem;
            text-align: center;
            box-shadow: 0 10px 40px rgba(136, 200, 188, 0.3);
            position: relative;
            overflow: hidden;
        }
        
        .welcome-header::before {
            content: '';
            position: absolute;
            top: -50%;
            right: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: rotate 20s linear infinite;
        }
        
        @keyframes rotate {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        .welcome-header h1 {
            position: relative;
            z-index: 1;
            margin: 0;
            font-size: 2.5rem;
            font-weight: 700;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }
        
        .welcome-header p {
            position: relative;
            z-index: 1;
            margin: 0.5rem 0 0 0;
            font-size: 1.2rem;
            opacity: 0.95;
        }
        
        /* ===== –°–û–û–ë–©–ï–ù–ò–Ø –û –£–°–ü–ï–•–ï ===== */
        .success-message {
            background: linear-gradient(135deg, #f0f9f7 0%, #e8f5f1 100%);
            border-left: 5px solid #88c8bc;
            padding: 2rem;
            border-radius: 16px;
            margin: 1.5rem 0;
            box-shadow: 0 8px 30px rgba(136, 200, 188, 0.2);
            animation: slideInRight 0.5s ease-out;
        }
        
        @keyframes slideInRight {
            from {
                opacity: 0;
                transform: translateX(30px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
        
        .success-message h3 {
            color: #88c8bc;
            margin-top: 0;
        }
        
        /* ===== TELEGRAM –°–¢–ê–¢–£–°–´ ===== */
        .telegram-connected {
            background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
            border-left: 5px solid #0088cc;
            padding: 1.5rem;
            border-radius: 12px;
            margin: 1rem 0;
            animation: fadeIn 0.5s ease-out;
        }
        
        .telegram-disconnected {
            background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%);
            border-left: 5px solid #ff9800;
            padding: 1.5rem;
            border-radius: 12px;
            margin: 1rem 0;
            animation: fadeIn 0.5s ease-out;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        /* ===== –í–†–ï–ú–ï–ù–ù–´–ï –°–õ–û–¢–´ ===== */
        .time-slot-button {
            transition: all 0.2s ease;
        }
        
        .time-slot-button:hover {
            transform: scale(1.05);
        }
        
        /* ===== –ú–ï–¢–†–ò–ö–ò ===== */
        [data-testid="stMetricValue"] {
            font-size: 2rem;
            font-weight: 700;
            color: #88c8bc;
        }
        
        /* ===== –§–û–†–ú–´ ===== */
        .stTextInput>div>div>input,
        .stTextArea>div>div>textarea,
        .stSelectbox>div>div>select {
            border-radius: 10px;
            border: 2px solid #e0e0e0;
            transition: all 0.3s ease;
        }
        
        .stTextInput>div>div>input:focus,
        .stTextArea>div>div>textarea:focus,
        .stSelectbox>div>div>select:focus {
            border-color: #88c8bc;
            box-shadow: 0 0 0 3px rgba(136, 200, 188, 0.1);
        }
        
        /* ===== –≠–ö–°–ü–ê–ù–î–ï–†–´ ===== */
        .streamlit-expanderHeader {
            background: white;
            border-radius: 10px;
            border: 1px solid #e0e0e0;
            transition: all 0.3s ease;
        }
        
        .streamlit-expanderHeader:hover {
            background: #f8f9fa;
            border-color: #88c8bc;
        }
        
        /* ===== –¢–ê–ë–´ ===== */
        .stTabs [data-baseweb="tab-list"] {
            gap: 8px;
        }
        
        .stTabs [data-baseweb="tab"] {
            border-radius: 10px;
            padding: 12px 24px;
            background: white;
            border: 2px solid #e0e0e0;
            transition: all 0.3s ease;
        }
        
        .stTabs [data-baseweb="tab"]:hover {
            background: #f8f9fa;
            border-color: #88c8bc;
        }
        
        .stTabs [aria-selected="true"] {
            background: linear-gradient(135deg, #88c8bc 0%, #6ba292 100%);
            color: white !important;
            border-color: #88c8bc;
        }
        
        /* ===== –ü–†–û–ì–†–ï–°–° –ë–ê–† ===== */
        .stProgress > div > div > div > div {
            background: linear-gradient(90deg, #88c8bc 0%, #6ba292 100%);
        }
        
        /* ===== –ê–õ–ï–†–¢–´ ===== */
        .stAlert {
            border-radius: 12px;
            animation: slideInLeft 0.3s ease-out;
        }
        
        @keyframes slideInLeft {
            from {
                opacity: 0;
                transform: translateX(-20px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
        
        /* ===== –°–ê–ô–î–ë–ê–† ===== */
        [data-testid="stSidebar"] {
            background: linear-gradient(180deg, #f8f9fa 0%, #ffffff 100%);
        }
        
        /* ===== –°–ö–†–û–õ–õ–ë–ê–† ===== */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb {
            background: linear-gradient(135deg, #88c8bc 0%, #6ba292 100%);
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(135deg, #6ba292 0%, #88c8bc 100%);
        }
        
        /* ===== LOADING SPINNER ===== */
        .stSpinner > div {
            border-top-color: #88c8bc !important;
        }
        </style>
    """, unsafe_allow_html=True)

# ============================================================================
# –£–¢–ò–õ–ò–¢–´ –ò –•–ï–õ–ü–ï–†–´ (–£–õ–£–ß–®–ï–ù–ù–´–ï)
# ============================================================================

def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    return hashlib.sha256(password.encode()).hexdigest()

def normalize_phone(phone: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    return re.sub(r'\D', '', phone)

def format_phone(phone: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    clean = normalize_phone(phone)
    if len(clean) == 11 and clean.startswith('7'):
        return f"+7 ({clean[1:4]}) {clean[4:7]}-{clean[7:9]}-{clean[9:]}"
    elif len(clean) == 10:
        return f"+7 ({clean[0:3]}) {clean[3:6]}-{clean[6:8]}-{clean[8:]}"
    return phone

def validate_phone(phone: str) -> tuple:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    clean = normalize_phone(phone)
    if len(clean) < 10:
        return False, "‚ùå –ù–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
    if len(clean) > 11:
        return False, "‚ùå –ù–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"
    if not clean.isdigit():
        return False, "‚ùå –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
    if len(clean) == 11 and not clean.startswith('7'):
        return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 7)"
    return True, "‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä"

def validate_email(email: str) -> tuple:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    if not email:
        return True, "‚ÑπÔ∏è Email –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if re.match(pattern, email):
        return True, "‚úÖ Email –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
    return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"

def format_date(date_str: str, format_str: str = '%d.%m.%Y') -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        return datetime.strptime(date_str, '%Y-%m-%d').strftime(format_str)
    except:
        return date_str

def calculate_time_until(date_str: str, time_str: str) -> timedelta:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–æ–±—ã—Ç–∏—è"""
    try:
        event_datetime = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        return event_datetime - datetime.now()
    except:
        return timedelta(0)

def format_timedelta(td: timedelta) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ timedelta –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if td.total_seconds() < 0:
        return "–ü—Ä–æ—à–ª–æ"
    
    days = td.days
    hours, remainder = divmod(td.seconds, 3600)
    minutes, _ = divmod(remainder, 60)
    
    parts = []
    if days > 0:
        parts.append(f"{days} –¥–Ω.")
    if hours > 0:
        parts.append(f"{hours} —á.")
    if minutes > 0 or not parts:
        parts.append(f"{minutes} –º–∏–Ω.")
    
    return " ".join(parts)

def get_month_end(year: int, month: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞"""
    if month == 12:
        next_month = datetime(year + 1, 1, 1)
    else:
        next_month = datetime(year, month + 1, 1)
    month_end = next_month - timedelta(days=1)
    return month_end.strftime('%Y-%m-%d')

def get_weekday_name(date_str: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    try:
        date_obj = datetime.strptime(date_str, '%Y-%m-%d')
        weekday_names = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        return weekday_names[date_obj.weekday()]
    except:
        return ""

def format_datetime_relative(date_str: str, time_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞"""
    try:
        event_datetime = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        now = datetime.now()
        
        if event_datetime.date() == now.date():
            return f"–°–µ–≥–æ–¥–Ω—è –≤ {time_str}"
        elif event_datetime.date() == (now + timedelta(days=1)).date():
            return f"–ó–∞–≤—Ç—Ä–∞ –≤ {time_str}"
        elif event_datetime.date() == (now - timedelta(days=1)).date():
            return f"–í—á–µ—Ä–∞ –≤ {time_str}"
        else:
            return f"{format_date(date_str)} –≤ {time_str}"
    except:
        return f"{date_str} {time_str}"

# ============================================================================
# TELEGRAM –ë–û–¢ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
# ============================================================================

class TelegramBotService:
    def __init__(self):
        self.bot_token = TELEGRAM_CONFIG['bot_token']
        self.admin_chat_id = TELEGRAM_CONFIG['admin_chat_id']
        self.bot_username = TELEGRAM_CONFIG['bot_username']
        self.enabled = TELEGRAM_CONFIG['enabled']
    
    def _send_message(self, chat_id: str, message: str, parse_mode: str = 'HTML') -> bool:
        """–ë–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            if not self.enabled or not self.bot_token:
                return False
            
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            
            payload = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': parse_mode
            }
            
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Telegram ({response.status_code}): {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    def send_to_admin(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        return self._send_message(self.admin_chat_id, message)
    
    def send_to_client(self, client_chat_id: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É"""
        return self._send_message(client_chat_id, message)
    
    def check_client_connection(self, chat_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∫ –±–æ—Ç—É"""
        try:
            test_message = "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."
            return self._send_message(chat_id, test_message)
        except:
            return False
    
    def get_bot_link(self, client_phone: str = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        base_url = f"https://t.me/{self.bot_username}"
        if client_phone:
            return f"{base_url}?start=connect_{hash_password(client_phone)[:10]}"
        return base_url
    
    # ============================================================================
    # –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ó–ê–ü–ò–°–ò
    # ============================================================================
    
    def notify_booking_created_admin(self, booking_data: dict) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
        name = booking_data.get('client_name', '–ö–ª–∏–µ–Ω—Ç')
        phone = booking_data.get('client_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        date = format_date(booking_data.get('booking_date', ''))
        time = booking_data.get('booking_time', '')
        
        message = f"""
üìÖ <b>–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨ –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {name}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{phone}</code>
üìÖ <b>–î–∞—Ç–∞:</b> {date}
üïê <b>–í—Ä–µ–º—è:</b> {time}

‚è∞ <i>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ 1 —á–∞—Å –¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</i>
        """
        
        return self.send_to_admin(message)
    
    def notify_booking_created_client(self, client_chat_id: str, booking_data: dict) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏"""
        name = booking_data.get('client_name', '')
        date = format_date(booking_data.get('booking_date', ''))
        time = booking_data.get('booking_time', '')
        
        message = f"""
‚úÖ <b>–í–ê–®–ê –ó–ê–ü–ò–°–¨ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê</b>

–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {name}!

üìÖ <b>–î–∞—Ç–∞:</b> {date}
üïê <b>–í—Ä–µ–º—è:</b> {time}

–ú—ã –∂–¥–µ–º –≤–∞—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!

‚è∞ <i>–ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –∑–∞ 1 —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞</i>

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        
        return self.send_to_client(client_chat_id, message)
    
    def notify_booking_cancelled_admin(self, booking_data: dict) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏"""
        name = booking_data.get('client_name', '–ö–ª–∏–µ–Ω—Ç')
        phone = booking_data.get('client_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        date = format_date(booking_data.get('booking_date', ''))
        
        message = f"""
‚ùå <b>–û–¢–ú–ï–ù–ê –ó–ê–ü–ò–°–ò</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {name}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{phone}</code>
üìÖ <b>–î–∞—Ç–∞:</b> {date}

üö´ <i>–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º</i>
        """
        
        return self.send_to_admin(message)
    
    def notify_booking_cancelled_client(self, client_chat_id: str, booking_data: dict) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏"""
        name = booking_data.get('client_name', '')
        date = format_date(booking_data.get('booking_date', ''))
        
        message = f"""
‚ùå <b>–ó–ê–ü–ò–°–¨ –û–¢–ú–ï–ù–ï–ù–ê</b>

–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {name},

–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {date} –æ—Ç–º–µ–Ω–µ–Ω–∞.

–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–í–∞—à –ø—Å–∏—Ö–æ–ª–æ–≥
        """
        
        return self.send_to_client(client_chat_id, message)
    
    def notify_reminder_admin(self, booking_data: dict) -> bool:
        """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–¥–º–∏–Ω—É –∑–∞ 1 —á–∞—Å"""
        name = booking_data.get('client_name', '–ö–ª–∏–µ–Ω—Ç')
        phone = booking_data.get('client_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        time = booking_data.get('booking_time', '')
        
        message = f"""
‚è∞ <b>–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò</b>

–ß–µ—Ä–µ–∑ 1 —á–∞—Å —É –≤–∞—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {name}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{phone}</code>
üïê <b>–í—Ä–µ–º—è:</b> {time}

–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –≤—Å—Ç—Ä–µ—á–µ!
        """
        
        return self.send_to_admin(message)
    
    def notify_reminder_client(self, client_chat_id: str, booking_data: dict) -> bool:
        """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –∑–∞ 1 —á–∞—Å"""
        name = booking_data.get('client_name', '')
        time = booking_data.get('booking_time', '')
        
        message = f"""
‚è∞ <b>–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò</b>

–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {name}!

–ß–µ—Ä–µ–∑ 1 —á–∞—Å —É –≤–∞—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤ {time}.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –≤—Å—Ç—Ä–µ—á–µ.

–ñ–¥–µ–º –≤–∞—Å!
        """
        
        return self.send_to_client(client_chat_id, message)
    
    def send_welcome_notification(self, client_chat_id: str, client_name: str, upcoming_bookings: list):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        message = f"""
üëã <b>–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨, {client_name}!</b>

‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!</b>

–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:
‚Ä¢ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 —á–∞—Å –¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
‚Ä¢ ‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–∞—Ö
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö
        if upcoming_bookings:
            message += "\n\nüìÖ <b>–í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:</b>\n"
            for booking in upcoming_bookings:
                date = format_date(booking.get('booking_date', ''))
                time = booking.get('booking_time', '')
                message += f"‚Ä¢ {date} –≤ {time}\n"
        
        message += "\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–í–∞—à –ø—Å–∏—Ö–æ–ª–æ–≥ üåø"
        
        return self.send_to_client(client_chat_id, message)
    
    def send_upcoming_bookings_notification(self, client_chat_id: str, client_name: str, bookings: list):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö"""
        if not bookings:
            return False
        
        message = f"""
üìÖ <b>–í–ê–®–ò –ü–†–ï–î–°–¢–û–Ø–©–ò–ï –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò</b>

–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {client_name},

–£ –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:
        """
        
        for booking in bookings:
            date = format_date(booking.get('booking_date', ''))
            time = booking.get('booking_time', '')
            message += f"\n‚Ä¢ {date} –≤ {time}"
        
        message += "\n\n‚è∞ –ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –∑–∞ 1 —á–∞—Å –¥–æ –∫–∞–∂–¥–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!"
        
        return self.send_to_client(client_chat_id, message)
    
    def schedule_reminder(self, booking_data: dict, client_chat_id: str):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 —á–∞—Å –¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        try:
            booking_date = booking_data.get('booking_date')
            booking_time = booking_data.get('booking_time')
            
            if not booking_date or not booking_time:
                return
            
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            consultation_datetime = datetime.strptime(
                f"{booking_date} {booking_time}", 
                "%Y-%m-%d %H:%M"
            )
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∑–∞ 1 —á–∞—Å)
            reminder_time = consultation_datetime - timedelta(hours=1)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            now = datetime.now()
            delay_seconds = (reminder_time - now).total_seconds()
            
            # –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º
            if delay_seconds > 0:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                timer = threading.Timer(
                    delay_seconds, 
                    self._send_reminder, 
                    [booking_data, client_chat_id]
                )
                timer.daemon = True
                timer.start()
                
                print(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {reminder_time}")
            else:
                print("‚ö†Ô∏è –í—Ä–µ–º—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    
    def _send_reminder(self, booking_data: dict, client_chat_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            print("üîî –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
            self.notify_reminder_admin(booking_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É
            self.notify_reminder_client(client_chat_id, booking_data)
            
            print("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
telegram_bot = TelegramBotService()

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° TELEGRAM –í –ë–ê–ó–ï
# ============================================================================

def save_telegram_chat_id(phone: str, chat_id: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Telegram chat_id –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        phone_hash = hash_password(normalize_phone(phone))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
        response = supabase.table('bookings')\
            .update({'telegram_chat_id': chat_id})\
            .eq('phone_hash', phone_hash)\
            .execute()
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id: {e}")
        return False

def get_client_telegram_chat_id(phone: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Telegram chat_id –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        phone_hash = hash_password(normalize_phone(phone))
        
        response = supabase.table('bookings')\
            .select('telegram_chat_id')\
            .eq('phone_hash', phone_hash)\
            .not_.is_('telegram_chat_id', None)\
            .limit(1)\
            .execute()
        
        if response.data and response.data[0]['telegram_chat_id']:
            return response.data[0]['telegram_chat_id']
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id: {e}")
        return None

def get_upcoming_bookings_with_telegram(phone: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        phone_hash = hash_password(normalize_phone(phone))
        
        response = supabase.table('bookings')\
            .select('*')\
            .eq('phone_hash', phone_hash)\
            .eq('status', 'confirmed')\
            .gte('booking_date', datetime.now().date().isoformat())\
            .order('booking_date')\
            .order('booking_time')\
            .execute()
        
        return response.data if response.data else []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {e}")
        return []

def send_telegram_connection_test(chat_id: str, client_name: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    try:
        message = f"""
üîî <b>–¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>

–ü—Ä–∏–≤–µ—Ç, {client_name}!

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram.

–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:
‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 —á–∞—Å
‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–∞—Ö

–û—Ç–ª–∏—á–Ω–æ! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç! üéâ
        """
        
        return telegram_bot.send_to_client(chat_id, message)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

# ============================================================================
# –ú–ï–ù–ï–î–ñ–ï–† –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
# ============================================================================

class NotificationManager:
    def __init__(self):
        self.bot = telegram_bot
    
    def notify_booking_created(self, booking_data: dict, client_chat_id: str = None):
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
        results = {}
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        results['admin_notified'] = self.bot.notify_booking_created_admin(booking_data)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω chat_id)
        if client_chat_id:
            results['client_notified'] = self.bot.notify_booking_created_client(client_chat_id, booking_data)
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å
            self.bot.schedule_reminder(booking_data, client_chat_id)
            results['reminder_scheduled'] = True
        
        return results
    
    def notify_booking_cancelled(self, booking_data: dict, client_chat_id: str = None):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏"""
        results = {}
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        results['admin_notified'] = self.bot.notify_booking_cancelled_admin(booking_data)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω chat_id)
        if client_chat_id:
            results['client_notified'] = self.bot.notify_booking_cancelled_client(client_chat_id, booking_data)
        
        return results
    
    def connect_client_telegram(self, phone: str, chat_id: str, client_name: str):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∫ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ –±–∞–∑–µ
            save_success = save_telegram_chat_id(phone, chat_id)
            
            if not save_success:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏
            upcoming_bookings = get_upcoming_bookings_with_telegram(phone)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            welcome_success = self.bot.send_welcome_notification(chat_id, client_name, upcoming_bookings)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            test_success = send_telegram_connection_test(chat_id, client_name)
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
            for booking in upcoming_bookings:
                self.bot.schedule_reminder(booking, chat_id)
            
            return welcome_success or test_success
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram: {e}")
            return False
    
    def send_upcoming_bookings(self, phone: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö"""
        try:
            chat_id = get_client_telegram_chat_id(phone)
            if not chat_id:
                return False
            
            upcoming_bookings = get_upcoming_bookings_with_telegram(phone)
            if not upcoming_bookings:
                return False
            
            client_name = st.session_state.client_name
            
            return self.bot.send_upcoming_bookings_notification(chat_id, client_name, upcoming_bookings)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
            return False

# –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notifier = NotificationManager()

# ============================================================================
# –†–ê–ó–î–ï–õ TELEGRAM –í –õ–ò–ß–ù–û–ú –ö–ê–ë–ò–ù–ï–¢–ï
# ============================================================================

def render_telegram_section():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram"""
    st.markdown("### üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π chat_id –∫–ª–∏–µ–Ω—Ç–∞
    current_chat_id = get_client_telegram_chat_id(st.session_state.client_phone)
    
    if current_chat_id:
        # Telegram —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
        st.markdown("""
        <div class="telegram-connected">
            <h4>‚úÖ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω!</h4>
            <p>–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏—è—Ö</p>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            st.info("""
            **–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:**
            ‚Ä¢ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
            ‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 —á–∞—Å –¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π  
            ‚Ä¢ ‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–∞—Ö
            """)
        
        with col2:
            if st.button("üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç", use_container_width=True):
                if send_telegram_connection_test(current_chat_id, st.session_state.client_name):
                    st.success("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        
        with col3:
            if st.button("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", use_container_width=True):
                if notifier.send_upcoming_bookings(st.session_state.client_phone):
                    st.success("‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                else:
                    st.error("‚ùå –ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö
        upcoming_bookings = get_upcoming_bookings_with_telegram(st.session_state.client_phone)
        if upcoming_bookings:
            st.markdown("#### üìÖ –í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:")
            for booking in upcoming_bookings:
                date = format_date(booking['booking_date'])
                time = booking['booking_time']
                st.write(f"‚Ä¢ {date} –≤ {time}")
        
    else:
        # Telegram –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
        st.markdown("""
        <div class="telegram-disconnected">
            <h4>‚ö†Ô∏è Telegram –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</h4>
            <p>–í—ã –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–∏—Å—è—Ö –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        ### üì± –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Telegram –∑–∞ 2 –º–∏–Ω—É—Ç—ã!
        
        **–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:**
        ‚Ä¢ ‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
        ‚Ä¢ ‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 —á–∞—Å
        ‚Ä¢ ‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–∞—Ö –∑–∞–ø–∏—Å–µ–π
        
        **–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å:**
        1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram" –Ω–∏–∂–µ
        2. –û—Ç–∫—Ä–æ–µ—Ç—Å—è Telegram —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º
        3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É START / –ó–ê–ü–£–°–¢–ò–¢–¨
        4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Chat ID
        """)
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞
        bot_link = telegram_bot.get_bot_link(st.session_state.client_phone)
        
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.markdown(f"""
            <a href="{bot_link}" target="_blank">
                <button style="
                    background: #0088cc; 
                    color: white; 
                    padding: 15px; 
                    border: none; 
                    border-radius: 10px; 
                    font-size: 16px; 
                    cursor: pointer;
                    width: 100%;
                ">
                    üì± –ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram
                </button>
            </a>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            **–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**
            1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à **Chat ID** –∏–∑ Telegram
            2. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ
            3. –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
            
            *–ö–∞–∫ –Ω–∞–π—Ç–∏ Chat ID?*
            - –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É [@userinfobot](https://t.me/userinfobot) –∏ –æ–Ω –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à Chat ID
            """)
            
            with st.form("connect_telegram_form"):
                chat_id = st.text_input(
                    "–í–∞—à Chat ID –∏–∑ Telegram:",
                    placeholder="123456789",
                    help="–¶–∏—Ñ—Ä–æ–≤–æ–π ID, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –≤—ã–¥–∞—Å—Ç –±–æ—Ç"
                )
                
                submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å", use_container_width=True)
                
                if submitted:
                    if not chat_id:
                        st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ Chat ID")
                    elif not chat_id.isdigit():
                        st.error("‚ùå Chat ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                        if telegram_bot.check_client_connection(chat_id):
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º
                            success = notifier.connect_client_telegram(
                                st.session_state.client_phone,
                                chat_id,
                                st.session_state.client_name
                            )
                            
                            if success:
                                st.success("üéâ Telegram —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
                                st.balloons()
                                st.rerun()
                            else:
                                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                        else:
                            st.error("""
                            ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è!
                            
                            **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
                            ‚Ä¢ –í—ã –Ω–µ –Ω–∞–∂–∞–ª–∏ START –≤ –±–æ—Ç–µ
                            ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π Chat ID
                            ‚Ä¢ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                            
                            **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**
                            1. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram"
                            2. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –±–æ—Ç–µ –Ω–∞–∂–º–∏—Ç–µ START
                            3. –ü–æ–ª—É—á–∏—Ç–µ Chat ID –∫–æ–º–∞–Ω–¥–æ–π `/id`
                            4. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞
                            """)
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è Chat ID
        with st.expander("üîç –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Chat ID?"):
            st.markdown("""
            **–°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞**
            1. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram" –≤—ã—à–µ
            2. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –±–æ—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ `/id`
            3. –ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –≤–∞—à Chat ID
            
            **–°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ @userinfobot**
            1. –ù–∞–π–¥–∏—Ç–µ –≤ Telegram `@userinfobot`
            2. –ù–∞—á–Ω–∏—Ç–µ —Å –Ω–∏–º –¥–∏–∞–ª–æ–≥
            3. –û–Ω –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à Chat ID
            
            **–°–ø–æ—Å–æ–± 3: –í—Ä—É—á–Ω—É—é**
            - –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—à –±–æ—Ç
            - –ù–∞–∂–º–∏—Ç–µ START
            - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã –∏–∑ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `/id`
            """)

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ============================================================================

st.set_page_config(**PAGE_CONFIG)
load_custom_css()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase = init_supabase()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö session state"""
    defaults = {
        'admin_logged_in': False,
        'client_logged_in': False,
        'client_phone': "",
        'client_name': "",
        'current_tab': "–ó–∞–ø–∏—Å—å",
        'show_admin_login': False,
        'selected_time': None,
        'booking_date': None,
        'selected_client': None,
        'selected_client_name': None,
        'show_new_booking_form': False,
        'show_stats': False,
        'confirm_delete': {},
        'search_query': '',
        'auto_refresh': False
    }
    
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value

init_session_state()

# ============================================================================
# –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –ù–ê–°–¢–†–û–ô–ö–ò
# ============================================================================

@st.cache_data(ttl=300)
def get_settings():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        response = supabase.table('settings').select('*').eq('id', 1).execute()
        if response.data:
            settings = response.data[0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –ë–î
            default_info_settings = {
                'info_title': '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                'info_work_hours': 'üïê –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:\n09:00 - 18:00',
                'info_session_duration': '‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:\n60 –º–∏–Ω—É—Ç',
                'info_format': 'üíª –§–æ—Ä–º–∞—Ç:\n–û–Ω–ª–∞–π–Ω –∏–ª–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ',
                'info_contacts': 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\nüì± +7 (999) 123-45-67\nüìß hello@psychologist.ru\nüåø psychologist.ru',
                'info_additional': ''
            }
            
            for key, value in default_info_settings.items():
                if key not in settings:
                    settings[key] = value
            
            return settings
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_settings = {
                'work_start': '09:00',
                'work_end': '18:00', 
                'session_duration': 60,
                'break_duration': 15,
                'info_title': '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                'info_work_hours': 'üïê –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:\n09:00 - 18:00',
                'info_session_duration': '‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:\n60 –º–∏–Ω—É—Ç',
                'info_format': 'üíª –§–æ—Ä–º–∞—Ç:\n–û–Ω–ª–∞–π–Ω –∏–ª–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ',
                'info_contacts': 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\nüì± +7 (999) 123-45-67\nüìß hello@psychologist.ru\nüåø psychologist.ru',
                'info_additional': ''
            }
            
            try:
                supabase.table('settings').insert({**default_settings, 'id': 1}).execute()
                return default_settings
            except Exception as insert_error:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ –ø–æ–ª—è, –ø—Ä–æ–±—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ
                basic_settings = {
                    'work_start': '09:00',
                    'work_end': '18:00', 
                    'session_duration': 60,
                    'break_duration': 15
                }
                supabase.table('settings').insert({**basic_settings, 'id': 1}).execute()
                return {**basic_settings, **default_info_settings}
                
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            'work_start': '09:00',
            'work_end': '18:00', 
            'session_duration': 60,
            'break_duration': 15,
            'info_title': '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            'info_work_hours': 'üïê –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:\n09:00 - 18:00',
            'info_session_duration': '‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:\n60 –º–∏–Ω—É—Ç',
            'info_format': 'üíª –§–æ—Ä–º–∞—Ç:\n–û–Ω–ª–∞–π–Ω –∏–ª–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ',
            'info_contacts': 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\nüì± +7 (999) 123-45-67\nüìß hello@psychologist.ru\nüåø psychologist.ru',
            'info_additional': ''
        }

def update_settings(work_start: str, work_end: str, session_duration: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        update_data = {
            'work_start': work_start,
            'work_end': work_end,
            'session_duration': session_duration
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        current_settings = get_settings()
        filtered_data = {k: v for k, v in update_data.items() if k in current_settings}
        
        if filtered_data:
            supabase.table('settings').update(filtered_data).eq('id', 1).execute()
            st.cache_data.clear()
            return True
        else:
            return False
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False

def update_info_settings(info_data: dict):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_settings = get_settings()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
        update_data = {}
        for key, value in info_data.items():
            if key in current_settings:
                update_data[key] = value
        
        if update_data:
            supabase.table('settings').update(update_data).eq('id', 1).execute()
            st.cache_data.clear()
            return True
        else:
            st.error("‚ùå –ù–µ—Ç –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return False
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return False

def render_info_panel():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"""
    settings = get_settings()
    if not settings:
        return
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å fallback
    title = settings.get('info_title', '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    work_hours = settings.get('info_work_hours', 'üïê –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:\n09:00 - 18:00')
    session_duration = settings.get('info_session_duration', '‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:\n60 –º–∏–Ω—É—Ç')
    format_info = settings.get('info_format', 'üíª –§–æ—Ä–º–∞—Ç:\n–û–Ω–ª–∞–π–Ω –∏–ª–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ')
    contacts = settings.get('info_contacts', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\nüì± +7 (999) 123-45-67\nüìß hello@psychologist.ru\nüåø psychologist.ru')
    additional = settings.get('info_additional', '')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    info_html = f"""
    <div class="info-box">
        <h4>{title}</h4>
        <p><strong>{work_hours.replace(chr(10), '<br>')}</strong></p>
        <p><strong>{session_duration.replace(chr(10), '<br>')}</strong></p>
        <p><strong>{format_info.replace(chr(10), '<br>')}</strong></p>
        <hr>
        <h4>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã</h4>
        <p>{contacts.replace(chr(10), '<br>')}</p>
    """
    
    if additional and additional.strip():
        info_html += f'<p>{additional.replace(chr(10), "<br>")}</p>'
    
    info_html += "</div>"
    
    st.markdown(info_html, unsafe_allow_html=True)

# ============================================================================
# –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –ö–õ–ò–ï–ù–¢–´
# ============================================================================

@st.cache_data(ttl=60)
def get_client_info(phone: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    try:
        phone_hash = hash_password(normalize_phone(phone))
        response = supabase.table('bookings').select('client_name, client_email, client_telegram')\
            .eq('phone_hash', phone_hash)\
            .order('created_at', desc=True)\
            .limit(1)\
            .execute()
        
        if response.data:
            result = response.data[0]
            return {
                'name': result['client_name'],
                'email': result['client_email'],
                'telegram': result['client_telegram']
            }
        return None
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ: {e}")
        return None

def has_active_booking(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
    try:
        phone_hash = hash_password(normalize_phone(phone))
        response = supabase.table('bookings')\
            .select('id', count='exact')\
            .eq('phone_hash', phone_hash)\
            .eq('status', 'confirmed')\
            .gte('booking_date', datetime.now().date().isoformat())\
            .execute()
        
        return response.count > 0
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        return False

@st.cache_data(ttl=60)
def get_client_bookings(phone: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        phone_hash = hash_password(normalize_phone(phone))
        response = supabase.table('bookings')\
            .select('*')\
            .eq('phone_hash', phone_hash)\
            .order('booking_date', desc=True)\
            .order('booking_time', desc=True)\
            .execute()
        
        return pd.DataFrame(response.data) if response.data else pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return pd.DataFrame()

def get_upcoming_client_booking(phone: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–π –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        phone_hash = hash_password(normalize_phone(phone))
        response = supabase.table('bookings')\
            .select('*')\
            .eq('phone_hash', phone_hash)\
            .eq('status', 'confirmed')\
            .gte('booking_date', datetime.now().date().isoformat())\
            .order('booking_date')\
            .order('booking_time')\
            .limit(1)\
            .execute()
        
        return response.data[0] if response.data else None
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–µ–π –∑–∞–ø–∏—Å–∏: {e}")
        return None

@st.cache_data(ttl=120)
def get_all_clients():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    try:
        response = supabase.table('bookings')\
            .select('client_name, client_phone, client_email, client_telegram, phone_hash')\
            .execute()
        
        if response.data:
            df = pd.DataFrame(response.data)
            clients_df = df.groupby('phone_hash').first().reset_index()
            
            clients_data = []
            for phone_hash in clients_df['phone_hash'].unique():
                client_row = clients_df[clients_df['phone_hash'] == phone_hash].iloc[0]
                
                bookings_response = supabase.table('bookings')\
                    .select('id, status, booking_date')\
                    .eq('phone_hash', phone_hash)\
                    .execute()
                
                if bookings_response.data:
                    bookings_df = pd.DataFrame(bookings_response.data)
                    total = len(bookings_df)
                    upcoming = len(bookings_df[bookings_df['status'] == 'confirmed']) if 'status' in bookings_df.columns else 0
                    completed = len(bookings_df[bookings_df['status'] == 'completed']) if 'status' in bookings_df.columns else 0
                    cancelled = len(bookings_df[bookings_df['status'] == 'cancelled']) if 'status' in bookings_df.columns else 0
                    first_booking = bookings_df['booking_date'].min() if 'booking_date' in bookings_df.columns else ''
                    last_booking = bookings_df['booking_date'].max() if 'booking_date' in bookings_df.columns else ''
                else:
                    total = upcoming = completed = cancelled = 0
                    first_booking = last_booking = ''
                
                client_data = {
                    'phone_hash': phone_hash,
                    'client_name': client_row['client_name'],
                    'client_phone': format_phone(client_row['client_phone']),
                    'client_email': client_row['client_email'],
                    'client_telegram': client_row['client_telegram'],
                    'total_bookings': total,
                    'upcoming_bookings': upcoming,
                    'completed_bookings': completed,
                    'cancelled_bookings': cancelled,
                    'first_booking': first_booking,
                    'last_booking': last_booking
                }
                clients_data.append(client_data)
            
            return pd.DataFrame(clients_data)
        else:
            return pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        return pd.DataFrame()

@st.cache_data(ttl=60)
def get_client_booking_history(phone_hash: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        response = supabase.table('bookings')\
            .select('*')\
            .eq('phone_hash', phone_hash)\
            .order('booking_date', desc=True)\
            .order('booking_time', desc=True)\
            .execute()
        
        return pd.DataFrame(response.data) if response.data else pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        return pd.DataFrame()

# ============================================================================
# –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –ó–ê–ü–ò–°–ò
# ============================================================================

def is_time_available(selected_date: str, time_slot: str) -> tuple:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        booking_datetime = datetime.strptime(f"{selected_date} {time_slot}", "%Y-%m-%d %H:%M")
        time_diff = (booking_datetime - datetime.now()).total_seconds()
        
        min_advance = BOOKING_RULES["MIN_ADVANCE_HOURS"] * 3600
        
        if time_diff < 0:
            return False, "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ"
        elif time_diff < min_advance:
            return False, f"‚ùå –ó–∞–ø–∏—Å—å –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ {BOOKING_RULES['MIN_ADVANCE_HOURS']} —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞"
        else:
            return True, "‚úÖ –í—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–Ω–æ"
    except ValueError:
        return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏"

def get_available_slots(date: str) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
    try:
        settings = get_settings()
        if not settings:
            return []
            
        work_start = datetime.strptime(settings['work_start'], '%H:%M').time()
        work_end = datetime.strptime(settings['work_end'], '%H:%M').time()
        session_duration = settings['session_duration']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–Ω—è
        blocked_response = supabase.table('blocked_slots')\
            .select('id')\
            .eq('block_date', date)\
            .is_('block_time', None)\
            .execute()
        
        if blocked_response.data:
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
        booked_response = supabase.table('bookings')\
            .select('booking_time')\
            .eq('booking_date', date)\
            .neq('status', 'cancelled')\
            .execute()
        
        booked_slots = [item['booking_time'] for item in booked_response.data] if booked_response.data else []
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        blocked_slots_response = supabase.table('blocked_slots')\
            .select('block_time')\
            .eq('block_date', date)\
            .not_.is_('block_time', None)\
            .execute()
        
        blocked_slots = [item['block_time'] for item in blocked_slots_response.data] if blocked_slots_response.data else []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        slots = []
        current_time = datetime.combine(datetime.today(), work_start)
        end_time = datetime.combine(datetime.today(), work_end)
        
        while current_time < end_time:
            time_slot = current_time.strftime('%H:%M')
            
            time_available, _ = is_time_available(date, time_slot)
            
            if (time_slot not in booked_slots and 
                time_slot not in blocked_slots and 
                time_available):
                slots.append(time_slot)
            
            current_time += timedelta(minutes=session_duration)
        
        return slots
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {e}")
        return []

def create_booking(client_name: str, client_phone: str, client_email: str, 
                  client_telegram: str, date: str, time_slot: str, notes: str = "",
                  client_chat_id: str = None) -> tuple:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏
        if has_active_booking(client_phone):
            return False, "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
        time_available, reason = is_time_available(date, time_slot)
        if not time_available:
            return False, reason
        
        phone_hash = hash_password(normalize_phone(client_phone))
        
        response = supabase.table('bookings').insert({
            'client_name': client_name,
            'client_phone': client_phone,
            'client_email': client_email,
            'client_telegram': client_telegram,
            'booking_date': date,
            'booking_time': time_slot,
            'notes': notes,
            'phone_hash': phone_hash,
            'status': 'confirmed',
            'telegram_chat_id': client_chat_id  # üî• –°–û–•–†–ê–ù–Ø–ï–ú CHAT_ID
        }).execute()
        
        if response.data:
            booking_data = response.data[0]
            
            # üî• –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ù–û–í–û–ô –ó–ê–ü–ò–°–ò
            notification_results = notifier.notify_booking_created(booking_data, client_chat_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if notification_results.get('admin_notified'):
                st.success("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω")
            if notification_results.get('client_notified') and client_chat_id:
                st.success("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            if notification_results.get('reminder_scheduled') and client_chat_id:
                st.success("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ 1 —á–∞—Å")
            
            return True, "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
        else:
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏"
            
    except Exception as e:
        if "duplicate key" in str(e) or "unique constraint" in str(e):
            return False, "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ"
        return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def create_booking_by_admin(client_name: str, client_phone: str, client_email: str, 
                           client_telegram: str, date: str, time_slot: str, notes: str = ""):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        phone_hash = hash_password(normalize_phone(client_phone))
        
        response = supabase.table('bookings').insert({
            'client_name': client_name,
            'client_phone': client_phone,
            'client_email': client_email,
            'client_telegram': client_telegram,
            'booking_date': date,
            'booking_time': time_slot,
            'notes': notes,
            'phone_hash': phone_hash,
            'status': 'confirmed'
        }).execute()
        
        if response.data:
            booking_data = response.data[0]
            
            # üî• –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–£
            notifier.notify_booking_created(booking_data)
            
            return True, "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
        else:
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏"
            
    except Exception as e:
        if "duplicate key" in str(e) or "unique constraint" in str(e):
            return False, "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ"
        return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def cancel_booking(booking_id: int, phone: str, client_chat_id: str = None) -> tuple:
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    try:
        phone_hash = hash_password(normalize_phone(phone))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        response = supabase.table('bookings')\
            .select('*')\
            .eq('id', booking_id)\
            .eq('phone_hash', phone_hash)\
            .execute()
        
        if not response.data:
            return False, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        booking = response.data[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞
        time_until = calculate_time_until(booking['booking_date'], booking['booking_time'])
        min_cancel = BOOKING_RULES["MIN_CANCEL_MINUTES"] * 60
        
        if time_until.total_seconds() < min_cancel:
            return False, f"–û—Ç–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º –∑–∞ {BOOKING_RULES['MIN_CANCEL_MINUTES']} –º–∏–Ω—É—Ç"
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        supabase.table('bookings')\
            .update({'status': 'cancelled'})\
            .eq('id', booking_id)\
            .execute()
        
        # üî• –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û–ë –û–¢–ú–ï–ù–ï
        updated_booking = {**booking, 'status': 'cancelled'}
        notification_results = notifier.notify_booking_cancelled(updated_booking, client_chat_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if notification_results.get('admin_notified'):
            st.success("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–º–µ–Ω–µ")
        if notification_results.get('client_notified') and client_chat_id:
            st.success("‚úÖ –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–º–µ–Ω–µ")
        
        return True, "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞"
        
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def delete_booking(booking_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        supabase.table('bookings').delete().eq('id', booking_id).execute()
        return True
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        return False

def get_all_bookings(date_from: str = None, date_to: str = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π"""
    try:
        query = supabase.table('bookings').select('*')
        
        if date_from and date_to:
            query = query.gte('booking_date', date_from).lte('booking_date', date_to)
        elif date_from:
            query = query.gte('booking_date', date_from)
        else:
            query = query.order('booking_date', desc=True).order('booking_time', desc=True)
        
        response = query.execute()
        return pd.DataFrame(response.data) if response.data else pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {e}")
        return pd.DataFrame()

# ============================================================================
# –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–Ø–ú–ò (–∞–¥–º–∏–Ω)
# ============================================================================

def update_booking_datetime(booking_id: int, new_date: str, new_time: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏"""
    try:
        response = supabase.table('bookings').update({
            'booking_date': new_date,
            'booking_time': new_time
        }).eq('id', booking_id).execute()
        
        if response.data:
            return True, "‚úÖ –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
        else:
            return False, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"
    except Exception as e:
        if "duplicate key" in str(e) or "unique constraint" in str(e):
            return False, "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ"
        return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def update_booking_notes(booking_id: int, new_notes: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–ø–∏—Å–∏"""
    try:
        supabase.table('bookings').update({'notes': new_notes}).eq('id', booking_id).execute()
        return True, "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω"
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def update_booking_status(booking_id: int, new_status: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        response = supabase.table('bookings')\
            .select('*')\
            .eq('id', booking_id)\
            .execute()
        
        if not response.data:
            return False, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        old_booking = response.data[0]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        supabase.table('bookings').update({'status': new_status}).eq('id', booking_id).execute()
        
        # üî• –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
        updated_booking = {**old_booking, 'status': new_status}
        
        if new_status == 'completed':
            notifier.notify_booking_cancelled(updated_booking)
        elif new_status == 'cancelled':
            notifier.notify_booking_cancelled(updated_booking)
        
        return True, f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {STATUS_DISPLAY[new_status]['text']}"
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

# ============================================================================
# –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –ë–õ–û–ö–ò–†–û–í–ö–ò
# ============================================================================

def block_date(date: str, reason: str = "–í—ã—Ö–æ–¥–Ω–æ–π") -> bool:
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"""
    try:
        response = supabase.table('blocked_slots').insert({
            'block_date': date,
            'reason': reason
        }).execute()
        
        return bool(response.data)
    except Exception as e:
        if "duplicate key" in str(e) or "unique constraint" in str(e):
            return False
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–Ω—è: {e}")
        return False

def unblock_date(date: str):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"""
    try:
        supabase.table('blocked_slots')\
            .delete()\
            .eq('block_date', date)\
            .is_('block_time', None)\
            .execute()
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–Ω—è: {e}")

def get_blocked_dates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç"""
    try:
        response = supabase.table('blocked_slots')\
            .select('block_date, reason')\
            .is_('block_time', None)\
            .order('block_date')\
            .execute()
        
        return response.data if response.data else []
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç: {e}")
        return []

def block_time_slot(date: str, time_slot: str, reason: str = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã") -> bool:
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
    try:
        response = supabase.table('blocked_slots').insert({
            'block_date': date,
            'block_time': time_slot,
            'reason': reason
        }).execute()
        
        return bool(response.data)
    except Exception as e:
        if "duplicate key" in str(e) or "unique constraint" in str(e):
            return False
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return False

def unblock_time_slot(block_id: int):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
    try:
        supabase.table('blocked_slots').delete().eq('id', block_id).execute()
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")

def get_blocked_slots():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
    try:
        response = supabase.table('blocked_slots')\
            .select('*')\
            .not_.is_('block_time', None)\
            .order('block_date')\
            .order('block_time')\
            .execute()
        
        return pd.DataFrame(response.data) if response.data else pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {e}")
        return pd.DataFrame()

# ============================================================================
# –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê
# ============================================================================

@st.cache_data(ttl=60)
def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        total_response = supabase.table('bookings').select('id', count='exact').execute()
        total = total_response.count or 0
        
        # –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏
        upcoming_response = supabase.table('bookings')\
            .select('id', count='exact')\
            .eq('status', 'confirmed')\
            .gte('booking_date', datetime.now().date().isoformat())\
            .execute()
        upcoming = upcoming_response.count or 0
        
        # –ó–∞–ø–∏—Å–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        current_date = datetime.now()
        month_start = current_date.replace(day=1).date().isoformat()
        month_end = get_month_end(current_date.year, current_date.month)
        
        monthly_response = supabase.table('bookings')\
            .select('id', count='exact')\
            .gte('booking_date', month_start)\
            .lte('booking_date', month_end)\
            .execute()
        this_month = monthly_response.count or 0
        
        # –ó–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        week_ago = (datetime.now() - timedelta(days=7)).date().isoformat()
        weekly_response = supabase.table('bookings')\
            .select('id', count='exact')\
            .gte('booking_date', week_ago)\
            .execute()
        this_week = weekly_response.count or 0
        
        return total, upcoming, this_month, this_week
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return 0, 0, 0, 0

# ============================================================================
# –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
# ============================================================================

def check_admin_password(password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return hash_password(password) == ADMIN_PASSWORD_HASH

def client_login(phone: str) -> bool:
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        phone_hash = hash_password(normalize_phone(phone))
        response = supabase.table('bookings')\
            .select('client_name')\
            .eq('phone_hash', phone_hash)\
            .order('created_at', desc=True)\
            .limit(1)\
            .execute()
        
        if response.data:
            st.session_state.client_logged_in = True
            st.session_state.client_phone = phone
            st.session_state.client_name = response.data[0]['client_name']
            return True
        return False
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def client_logout():
    """–í—ã—Ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞"""
    st.session_state.client_logged_in = False
    st.session_state.client_phone = ""
    st.session_state.client_name = ""
    st.session_state.current_tab = "–ó–∞–ø–∏—Å—å"

def admin_login():
    """–í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    st.session_state.admin_logged_in = True
    st.session_state.show_admin_login = False

def admin_logout():
    """–í—ã—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    st.session_state.admin_logged_in = False

# ============================================================================
# UI –ö–û–ú–ü–û–ù–ï–ù–¢–´
# ============================================================================

def render_booking_card(row, date, show_actions=True):
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–ø–∏—Å–∏"""
    status_info = STATUS_DISPLAY.get(row['status'], STATUS_DISPLAY['confirmed'])
    
    unique_key = f"delete_{date}_{row['booking_time']}_{row['id']}"
    
    with st.container():
        col1, col2 = st.columns([4, 1]) if show_actions else st.columns([1])
        
        with col1:
            st.markdown(f"**{status_info['emoji']} {row['booking_time']} - {row['client_name']}**")
            st.text(f"üì± {row['client_phone']}")
            
            if row.get('client_email'):
                st.text(f"üìß {row['client_email']}")
                
            if row.get('client_telegram'):
                st.text(f"üí¨ {row['client_telegram']}")
                
            if row.get('notes'):
                st.text(f"üí≠ {row['notes']}")
            
            st.markdown(f"**–°—Ç–∞—Ç—É—Å:** <span style='color: {status_info['color']};'>{status_info['text']}</span>", 
                       unsafe_allow_html=True)
        
        if show_actions and col2:
            with col2:
                if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=unique_key, use_container_width=True):
                    delete_booking(row['id'])
                    st.success("‚úÖ –£–¥–∞–ª–µ–Ω–æ!")
                    st.rerun()
        
        st.markdown("---")

def render_time_slots(available_slots, key_prefix="slot"):
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
    if not available_slots:
        st.warning("üòî –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        return None
    
    st.markdown("#### üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è")
    st.info("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç–æ–≤")
    
    cols = st.columns(4)
    for idx, time_slot in enumerate(available_slots):
        with cols[idx % 4]:
            if st.button(f"üïê {time_slot}", key=f"{key_prefix}_{time_slot}", 
                        use_container_width=True, type="primary"):
                st.session_state.selected_time = time_slot
                st.rerun()
    
    return st.session_state.get('selected_time')

# ============================================================================
# –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨
# ============================================================================

with st.sidebar:
    st.markdown("# üåø –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    
    if st.session_state.client_logged_in:
        # –ö–õ–ò–ï–ù–¢ –í–û–®–ï–õ –í –°–ò–°–¢–ï–ú–£
        if st.session_state.client_name:
            st.markdown(f"### üëã {st.session_state.client_name}!")
        
        # üî• –û–ë–ù–û–í–õ–Ø–ï–ú –ú–ï–ù–Æ - –î–û–ë–ê–í–õ–Ø–ï–ú –í–ö–õ–ê–î–ö–£ "–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø"
        tabs = st.radio(
            "–ú–µ–Ω—é:",
            ["üëÅÔ∏è –¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üìÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", "üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π"],  # üî• –î–û–ë–ê–í–ò–õ–ò
            key="client_tabs"
        )
        st.session_state.current_tab = tabs
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å Telegram
        telegram_connected = get_client_telegram_chat_id(st.session_state.client_phone)
        if telegram_connected:
            st.success("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        else:
            st.warning("üîï –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        st.markdown("---")
        st.markdown("### üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
        st.info("üë§ –†–µ–∂–∏–º –∫–ª–∏–µ–Ω—Ç–∞")
        
        if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True):
            client_logout()
            st.rerun()
    
    elif st.session_state.admin_logged_in:
        # –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† –í–û–®–ï–õ –í –°–ò–°–¢–ï–ú–£
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        total, upcoming, this_month, this_week = get_stats()
        st.metric("üìã –í—Å–µ–≥–æ", total)
        st.metric("‚è∞ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö", upcoming)
        st.metric("üìÖ –ó–∞ –º–µ—Å—è—Ü", this_month)
        
        st.markdown("---")
        st.markdown("### üë©‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        st.success("‚úÖ –í—ã –∑–∞—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        
        if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True):
            admin_logout()
            st.rerun()
    
    else:
        # –ù–ò–ö–¢–û –ù–ï –í–û–®–ï–õ –í –°–ò–°–¢–ï–ú–£
        st.markdown("### üë§ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        st.info("–î–ª—è –∑–∞–ø–∏—Å–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    
    # –†–ê–ó–î–ï–õ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
    st.markdown("---")
    
    if not st.session_state.client_logged_in and not st.session_state.admin_logged_in:
        st.markdown("### üë©‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        
        if st.button("üîê –í—Ö–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", use_container_width=True, type="secondary"):
            st.session_state.show_admin_login = True
            st.rerun()
        
        if st.session_state.show_admin_login:
            with st.form("admin_sidebar_login", clear_on_submit=True):
                password = st.text_input("–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", type="password")
                submit = st.form_submit_button("–í–æ–π—Ç–∏", use_container_width=True)
                
                if submit:
                    if password and check_admin_password(password):
                        admin_login()
                        st.success("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
                        st.rerun()
                    elif password:
                        st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
            
            if st.button("‚ùå –û—Ç–º–µ–Ω–∞", use_container_width=True, type="secondary"):
                st.session_state.show_admin_login = False
                st.rerun()

# ============================================================================
# –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö SUPABASE
# ============================================================================

if supabase is None:
    st.error("""
    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:
    
    1. **–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è** SUPABASE_URL –∏ SUPABASE_KEY
    2. **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞** –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Supabase
    3. **–°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏** –∏ –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
    
    –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª `.env` —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:
    ```
    SUPABASE_URL=your_project_url
    SUPABASE_KEY=your_anon_key
    ```
    """)
    st.stop()

# ============================================================================
# –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê: –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
# ============================================================================

if st.session_state.admin_logged_in:
    st.title("üë©‚Äçüíº –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    tabs = st.tabs(["üìã –ó–∞–ø–∏—Å–∏", "üë• –ö–ª–∏–µ–Ω—Ç—ã", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"])
    
    # –í–∫–ª–∞–¥–∫–∞ –ó–∞–ø–∏—Å–∏
    with tabs[0]:
        st.markdown("### üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏")
        
        col1, col2 = st.columns([2, 1])
        with col1:
            date_filter = st.selectbox(
                "üìÖ –ü–µ—Ä–∏–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                ["–í—Å–µ –¥–∞—Ç—ã", "–°–µ–≥–æ–¥–Ω—è", "–ù–∞ –Ω–µ–¥–µ–ª—é", "–ù–∞ –º–µ—Å—è—Ü"]
            )
        with col2:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
                st.rerun()
        
        today = datetime.now().date()
        
        if date_filter == "–°–µ–≥–æ–¥–Ω—è":
            date_from = str(today)
            date_to = str(today)
        elif date_filter == "–ù–∞ –Ω–µ–¥–µ–ª—é":
            date_from = str(today)
            date_to = str(today + timedelta(days=7))
        elif date_filter == "–ù–∞ –º–µ—Å—è—Ü":
            date_from = str(today)
            date_to = str(today + timedelta(days=30))
        else:
            date_from = None
            date_to = None
        
        df = get_all_bookings(date_from, date_to)
        
        if not df.empty:
            if date_from and date_to:
                df = df[(df['booking_date'] >= date_from) & (df['booking_date'] <= date_to)]
            elif date_from:
                df = df[df['booking_date'] >= date_from]
            
            df = df.sort_values(['booking_date', 'booking_time'], ascending=[True, True])
            
            st.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
            
            if not df.empty:
                df['booking_date'] = pd.to_datetime(df['booking_date']).dt.strftime('%d.%m.%Y')
                
                for date in sorted(df['booking_date'].unique()):
                    st.markdown(f"#### üìÖ {date}")
                    date_bookings = df[df['booking_date'] == date]
                    
                    for idx, row in date_bookings.iterrows():
                        render_booking_card(row, date)
                    
                    st.markdown("---")
            else:
                st.info("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")
        else:
            st.info("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    # –í–∫–ª–∞–¥–∫–∞ –ö–ª–∏–µ–Ω—Ç—ã
    with tabs[1]:
        st.markdown("### üë• –ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
        
        # –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
        st.markdown("#### üîç –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã")
        col1, col2 = st.columns([3, 1])
        with col1:
            search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω...", key="client_search")
        with col2:
            show_only_active = st.checkbox("–¢–æ–ª—å–∫–æ —Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏", value=False, key="active_filter")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        col_btn1, col_btn2, col_btn3 = st.columns([1, 1, 1])
        with col_btn1:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", use_container_width=True):
                st.rerun()
        with col_btn2:
            if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", use_container_width=True):
                st.session_state.show_stats = not st.session_state.get('show_stats', False)
        with col_btn3:
            if st.button("‚ûï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", use_container_width=True, type="primary"):
                st.session_state.show_new_booking_form = True
        
        # –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        if st.session_state.get('show_new_booking_form'):
            st.markdown("---")
            st.markdown("#### üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏")
            
            with st.form("new_booking_admin_form"):
                st.markdown("**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:**")
                col_a, col_b = st.columns(2)
                with col_a:
                    new_client_name = st.text_input("üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ *", placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", key="new_client_name")
                    new_client_email = st.text_input("üìß Email", placeholder="example@mail.com", key="new_client_email")
                with col_b:
                    new_client_phone = st.text_input("üì± –¢–µ–ª–µ—Ñ–æ–Ω *", placeholder="+7 (999) 123-45-67", key="new_client_phone")
                    new_client_telegram = st.text_input("üí¨ Telegram", placeholder="@username", key="new_client_telegram")
                
                st.markdown("**–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:**")
                col_c, col_d = st.columns(2)
                with col_c:
                    booking_date = st.date_input("üìÖ –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏", min_value=datetime.now().date(), 
                                               max_value=datetime.now().date() + timedelta(days=30), key="admin_booking_date")
                with col_d:
                    booking_time = st.time_input("üïê –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏", value=datetime.strptime("09:00", "%H:%M").time(), key="admin_booking_time")
                
                booking_notes = st.text_area("üí≠ –ü—Ä–∏—á–∏–Ω–∞ –≤—Å—Ç—Ä–µ—á–∏ / –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", height=100, placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è...", key="admin_booking_notes")
                
                col_submit, col_cancel = st.columns([1, 1])
                with col_submit:
                    submit_booking = st.form_submit_button("‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å", use_container_width=True)
                with col_cancel:
                    if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞", use_container_width=True):
                        st.session_state.show_new_booking_form = False
                        st.rerun()
                
                if submit_booking:
                    if not new_client_name or not new_client_phone:
                        st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞")
                    else:
                        success, message = create_booking_by_admin(
                            new_client_name, new_client_phone, new_client_email,
                            new_client_telegram, str(booking_date), booking_time.strftime("%H:%M"), booking_notes
                        )
                        if success:
                            st.success(message)
                            st.session_state.show_new_booking_form = False
                            st.rerun()
                        else:
                            st.error(message)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö
        clients_df = get_all_clients()
        
        if not clients_df.empty:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if search_query:
                mask = (clients_df['client_name'].str.contains(search_query, case=False, na=False)) | \
                       (clients_df['client_phone'].str.contains(search_query, case=False, na=False))
                clients_df = clients_df[mask]
            
            if show_only_active:
                clients_df = clients_df[clients_df['upcoming_bookings'] > 0]
            
            st.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients_df)}")
            
            # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if st.session_state.get('show_stats'):
                st.markdown("---")
                st.markdown("##### üìà –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                stat_col1, stat_col2, stat_col3, stat_col4 = st.columns(4)
                with stat_col1:
                    st.metric("–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤", len(clients_df))
                with stat_col2:
                    active_clients = len(clients_df[clients_df['upcoming_bookings'] > 0])
                    st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö", active_clients)
                with stat_col3:
                    avg_bookings = clients_df['total_bookings'].mean()
                    st.metric("–°—Ä–µ–¥–Ω–µ–µ –∑–∞–ø–∏—Å–µ–π", f"{avg_bookings:.1f}")
                with stat_col4:
                    total_bookings = clients_df['total_bookings'].sum()
                    st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", total_bookings)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
            for idx, client in clients_df.iterrows():
                with st.expander(f"üë§ {client['client_name']} - üì± {client['client_phone']} | üìÖ –ó–∞–ø–∏—Å–µ–π: {client['total_bookings']}", expanded=False):
                    col1, col2, col3 = st.columns([2, 1, 1])
                    
                    with col1:
                        st.markdown("**–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
                        st.write(f"üìß Email: {client['client_email'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                        st.write(f"üí¨ Telegram: {client['client_telegram'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                        
                        st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                        col_stat1, col_stat2, col_stat3, col_stat4 = st.columns(4)
                        with col_stat1:
                            st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", client['total_bookings'])
                        with col_stat2:
                            st.metric("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ", client['upcoming_bookings'])
                        with col_stat3:
                            st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–æ", client['completed_bookings'])
                        with col_stat4:
                            st.metric("–û—Ç–º–µ–Ω–µ–Ω–æ", client['cancelled_bookings'])
                    
                    with col2:
                        st.markdown("**–î–∞—Ç—ã:**")
                        first_booking = datetime.strptime(client['first_booking'][:10], '%Y-%m-%d').strftime('%d.%m.%Y')
                        last_booking = datetime.strptime(client['last_booking'][:10], '%Y-%m-%d').strftime('%d.%m.%Y')
                        st.write(f"üìÖ –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {first_booking}")
                        st.write(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {last_booking}")
                    
                    with col3:
                        if st.button("üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π", key=f"history_{client['phone_hash']}", use_container_width=True):
                            st.session_state.selected_client = client['phone_hash']
                            st.session_state.selected_client_name = client['client_name']
                    
                    # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                    if st.session_state.get('selected_client') == client['phone_hash']:
                        st.markdown("---")
                        st.markdown(f"#### üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π: {client['client_name']}")
                        
                        history_df = get_client_booking_history(client['phone_hash'])
                        if not history_df.empty:
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                            history_df['booking_date'] = pd.to_datetime(history_df['booking_date'])
                            history_df['formatted_date'] = history_df['booking_date'].dt.strftime('%d.%m.%Y')
                            history_df['created_at'] = pd.to_datetime(history_df['created_at']).dt.strftime('%d.%m.%Y %H:%M')
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                            for _, booking in history_df.iterrows():
                                status_info = STATUS_DISPLAY.get(booking['status'], STATUS_DISPLAY['confirmed'])
                                
                                with st.container():
                                    col_hist1, col_hist2, col_hist3 = st.columns([3, 1, 1])
                                    
                                    with col_hist1:
                                        st.write(f"**{booking['formatted_date']} {booking['booking_time']}** - {status_info['emoji']} {status_info['text']}")
                                        if booking['notes']:
                                            st.info(f"üí≠ {booking['notes']}")
                                    
                                    with col_hist2:
                                        st.write(f"üìÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {booking['created_at']}")
                                    
                                    with col_hist3:
                                        # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—å—é
                                        with st.popover("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", use_container_width=True):
                                            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                                            st.markdown("**üïê –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å:**")
                                            new_date = st.date_input("–ù–æ–≤–∞—è –¥–∞—Ç–∞", 
                                                                   value=booking['booking_date'].date(),
                                                                   min_value=datetime.now().date(),
                                                                   key=f"date_{booking['id']}")
                                            new_time = st.time_input("–ù–æ–≤–æ–µ –≤—Ä–µ–º—è", 
                                                                   value=datetime.strptime(booking['booking_time'], "%H:%M").time(),
                                                                   key=f"time_{booking['id']}")
                                            if st.button("üïê –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", key=f"reschedule_{booking['id']}", use_container_width=True):
                                                success, message = update_booking_datetime(
                                                    booking['id'], str(new_date), new_time.strftime("%H:%M")
                                                )
                                                if success:
                                                    st.success(message)
                                                    st.rerun()
                                                else:
                                                    st.error(message)
                                            
                                            st.markdown("---")
                                            
                                            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                                            st.markdown("**üí≠ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:**")
                                            new_notes = st.text_area("–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", 
                                                                   value=booking['notes'] or "",
                                                                   height=80,
                                                                   key=f"notes_{booking['id']}")
                                            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f"save_notes_{booking['id']}", use_container_width=True):
                                                success, message = update_booking_notes(booking['id'], new_notes)
                                                if success:
                                                    st.success(message)
                                                    st.rerun()
                                            
                                            st.markdown("---")
                                            
                                            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                                            st.markdown("**üìä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å:**")
                                            status_options = {
                                                'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
                                                'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞', 
                                                'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞'
                                            }
                                            new_status = st.selectbox(
                                                "–°—Ç–∞—Ç—É—Å",
                                                options=list(status_options.keys()),
                                                format_func=lambda x: status_options[x],
                                                index=list(status_options.keys()).index(booking['status']),
                                                key=f"status_{booking['id']}"
                                            )
                                            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", key=f"update_status_{booking['id']}", use_container_width=True):
                                                success, message = update_booking_status(booking['id'], new_status)
                                                if success:
                                                    st.success(message)
                                                    st.rerun()
                                    
                                    st.markdown("---")
                        else:
                            st.info("üì≠ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –ø—É—Å—Ç–∞")
            
            # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
            st.markdown("---")
            st.markdown("### üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º")
            
            col_sum1, col_sum2, col_sum3, col_sum4 = st.columns(4)
            with col_sum1:
                st.metric("–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤", len(clients_df))
            with col_sum2:
                active_clients = len(clients_df[clients_df['upcoming_bookings'] > 0])
                st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", active_clients)
            with col_sum3:
                avg_bookings = clients_df['total_bookings'].mean()
                st.metric("–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π", f"{avg_bookings:.1f}")
            with col_sum4:
                total_bookings = clients_df['total_bookings'].sum()
                st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", total_bookings)
                
        else:
            st.info("üì≠ –í –±–∞–∑–µ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    # –í–∫–ª–∞–¥–∫–∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    with tabs[2]:
        st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
        
        settings_tabs = st.tabs(["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å"])
        
        # –í–∫–ª–∞–¥–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        with settings_tabs[0]:
            st.markdown("#### üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            
            settings = get_settings()
            if settings:
                col1, col2, col3 = st.columns(3)
                with col1:
                    work_start = st.time_input("üïê –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", 
                                             value=datetime.strptime(settings['work_start'], '%H:%M').time())
                with col2:
                    work_end = st.time_input("üïê –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", 
                                           value=datetime.strptime(settings['work_end'], '%H:%M').time())
                with col3:
                    session_duration = st.number_input("‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ (–º–∏–Ω)", 
                                                      min_value=15, max_value=180, 
                                                      value=settings['session_duration'], step=15)
                
                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", use_container_width=True):
                    if update_settings(work_start.strftime('%H:%M'), work_end.strftime('%H:%M'), session_duration):
                        st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                        st.rerun()
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        
        # –í–∫–ª–∞–¥–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        with settings_tabs[1]:
            st.markdown("#### ‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏")
            st.info("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥—è—Ç –∫–ª–∏–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏")
            
            settings = get_settings()
            if settings:
                with st.form("info_panel_settings"):
                    st.markdown("**–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**")
                    info_title = st.text_input("üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏", 
                                             value=settings.get('info_title', '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'))
                    
                    st.markdown("**üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–Ω–µ–ª–∏:**")
                    info_work_hours = st.text_area("üïê –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è", 
                                                 value=settings.get('info_work_hours', 'üïê –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:\n09:00 - 18:00'),
                                                 height=80,
                                                 help="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \\n –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫")
                    
                    info_session_duration = st.text_area("‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", 
                                                       value=settings.get('info_session_duration', '‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:\n60 –º–∏–Ω—É—Ç'),
                                                       height=80)
                    
                    info_format = st.text_area("üíª –§–æ—Ä–º–∞—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", 
                                             value=settings.get('info_format', 'üíª –§–æ—Ä–º–∞—Ç:\n–û–Ω–ª–∞–π–Ω –∏–ª–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ'),
                                             height=80)
                    
                    info_contacts = st.text_area("üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                                               value=settings.get('info_contacts', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\nüì± +7 (999) 123-45-67\nüìß hello@psychologist.ru\nüåø psychologist.ru'),
                                               height=100,
                                               help="–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã, email, —Å–∞–π—Ç –∏ –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
                    
                    info_additional = st.text_area("üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                                                 value=settings.get('info_additional', ''),
                                                 height=100,
                                                 placeholder="–õ—é–±–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤...",
                                                 help="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ")
                    
                    col1, col2 = st.columns([1, 1])
                    with col1:
                        submit_info = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True)
                    with col2:
                        preview_info = st.form_submit_button("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", use_container_width=True)
                    
                    if submit_info:
                        info_data = {
                            'info_title': info_title,
                            'info_work_hours': info_work_hours,
                            'info_session_duration': info_session_duration,
                            'info_format': info_format,
                            'info_contacts': info_contacts,
                            'info_additional': info_additional
                        }
                        
                        if update_info_settings(info_data):
                            st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                            st.rerun()
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
                    
                    if preview_info:
                        st.markdown("---")
                        st.markdown("#### üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏")
                        st.markdown(f"""
                        <div class="info-box">
                            <h4>{info_title}</h4>
                            <p><strong>{info_work_hours.replace(chr(10), '<br>')}</strong></p>
                            <p><strong>{info_session_duration.replace(chr(10), '<br>')}</strong></p>
                            <p><strong>{info_format.replace(chr(10), '<br>')}</strong></p>
                            <hr>
                            <h4>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã</h4>
                            <p>{info_contacts.replace(chr(10), '<br>')}</p>
                            {f'<p>{info_additional.replace(chr(10), "<br>")}</p>' if info_additional and info_additional.strip() else ''}
                        </div>
                        """, unsafe_allow_html=True)
    
    # –í–∫–ª–∞–¥–∫–∞ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    with tabs[3]:
        st.markdown("### üö´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üìÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–Ω–µ–π")
            with st.form("block_day_form"):
                block_date_input = st.date_input("–î–∞—Ç–∞", min_value=datetime.now().date())
                block_reason = st.text_input("–ü—Ä–∏—á–∏–Ω–∞", value="–í—ã—Ö–æ–¥–Ω–æ–π")
                submit_block = st.form_submit_button("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True)
                
                if submit_block:
                    if block_date(str(block_date_input), block_reason):
                        st.success(f"‚úÖ –î–µ–Ω—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
                        st.rerun()
                    else:
                        st.error("‚ùå –î–µ–Ω—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            
            st.markdown("#### üïê –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏")
            with st.form("block_time_form"):
                time_block_date = st.date_input("–î–∞—Ç–∞", min_value=datetime.now().date(), key="time_date")
                time_block_time = st.time_input("–í—Ä–µ–º—è", value=datetime.strptime("09:00", "%H:%M").time())
                time_block_reason = st.text_input("–ü—Ä–∏—á–∏–Ω–∞", value="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã", key="time_reason")
                submit_time_block = st.form_submit_button("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True)
                
                if submit_time_block:
                    if block_time_slot(str(time_block_date), time_block_time.strftime("%H:%M"), time_block_reason):
                        st.success(f"‚úÖ –í—Ä–µ–º—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!")
                        st.rerun()
                    else:
                        st.error("‚ùå –°–ª–æ—Ç —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        
        with col2:
            st.markdown("#### üìã –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–∏")
            blocked_dates = get_blocked_dates()
            if blocked_dates:
                for block in blocked_dates:
                    col_a, col_b = st.columns([3, 1])
                    with col_a:
                        st.info(f"**{format_date(block['block_date'])}** - {block['reason']}")
                    with col_b:
                        if st.button("üóëÔ∏è", key=f"unblock_{block['block_date']}", use_container_width=True):
                            unblock_date(block['block_date'])
                            st.success("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
                            st.rerun()
            else:
                st.info("üì≠ –ù–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")
            
            st.markdown("#### üïê –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã")
            blocked_slots_df = get_blocked_slots()
            if not blocked_slots_df.empty:
                for idx, row in blocked_slots_df.iterrows():
                    col_a, col_b = st.columns([3, 1])
                    with col_a:
                        st.warning(f"**{format_date(row['block_date'])} {row['block_time']}** - {row['reason']}")
                    with col_b:
                        if st.button("üóëÔ∏è", key=f"unblock_slot_{row['id']}", use_container_width=True):
                            unblock_time_slot(row['id'])
                            st.success("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
                            st.rerun()
            else:
                st.info("üì≠ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
    
    # –í–∫–ª–∞–¥–∫–∞ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    with tabs[4]:
        st.markdown("### üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        total, upcoming, this_month, this_week = get_stats()
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("üìä –í—Å–µ–≥–æ", total)
        col2.metric("‚è∞ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö", upcoming)
        col3.metric("üìÖ –ó–∞ –º–µ—Å—è—Ü", this_month)
        col4.metric("üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é", this_week)
    
    # –í–∫–ª–∞–¥–∫–∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    with tabs[5]:
        st.markdown("### üîî –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        st.markdown("#### ü§ñ –°—Ç–∞—Ç—É—Å Telegram –±–æ—Ç–∞")
        
        if TELEGRAM_CONFIG['bot_token'] and TELEGRAM_CONFIG['admin_chat_id']:
            st.success("‚úÖ –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            st.markdown("#### üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
            test_message = st.text_area("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                                      "‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üì§ –¢–µ—Å—Ç –∞–¥–º–∏–Ω—É", use_container_width=True):
                    if telegram_bot.send_to_admin(test_message):
                        st.success("‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É!")
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
            with col2:
                test_chat_id = st.text_input("Chat ID –¥–ª—è —Ç–µ—Å—Ç–∞", placeholder="123456789")
                if st.button("üì§ –¢–µ—Å—Ç –∫–ª–∏–µ–Ω—Ç—É", use_container_width=True):
                    if test_chat_id:
                        if telegram_bot.send_to_client(test_chat_id, test_message):
                            st.success("‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É!")
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
                    else:
                        st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ Chat ID")
        
        else:
            st.error("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            st.markdown("""
            ### ‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:
            
            1. **–°–æ–∑–¥–∞–π –±–æ—Ç–∞** –≤ Telegram —á–µ—Ä–µ–∑ @BotFather
            2. **–ü–æ–ª—É—á–∏ —Ç–æ–∫–µ–Ω** –∏ —É–∫–∞–∂–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:
               ```env
               TELEGRAM_BOT_TOKEN=1234567890:ABCdefGHIjklMNOpqrsTUVwxyz
               TELEGRAM_ADMIN_CHAT_ID=123456789
               ```
            3. **–£–∑–Ω–∞–π —Å–≤–æ–π Chat ID** —á–µ—Ä–µ–∑ @userinfobot
            4. **–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ**
            """)

# ============================================================================
# –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê: –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –ß–ê–°–¢–¨
# ============================================================================

elif not st.session_state.client_logged_in:
    st.title("üåø –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
        st.markdown("#### üîê –£–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏—Å—å?")
        with st.form("client_login_form"):
            login_phone = st.text_input("üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", placeholder="+7 (999) 123-45-67")
            login_submit = st.form_submit_button("–í–æ–π—Ç–∏", use_container_width=True)
            
            if login_submit and login_phone:
                if client_login(login_phone):
                    st.success("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
                    st.rerun()
                else:
                    st.error("‚ùå –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        st.markdown("---")
        st.markdown("#### üìÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å")
        
        # –í—ã–±–æ—Ä –¥–∞—Ç—ã
        min_date = datetime.now().date()
        max_date = min_date + timedelta(days=BOOKING_RULES["MAX_DAYS_AHEAD"])
        
        selected_date = st.date_input("–î–∞—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", min_value=min_date, 
                                      max_value=max_date, value=min_date, format="DD.MM.YYYY")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã
        available_slots = get_available_slots(str(selected_date))
        selected_time = render_time_slots(available_slots, "guest_slot")
        
        if selected_time:
            st.success(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: **{selected_date.strftime('%d.%m.%Y')}** –≤ **{selected_time}**")
            
            st.markdown("#### üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ")
            with st.form("booking_form"):
                col_a, col_b = st.columns(2)
                with col_a:
                    client_name = st.text_input("üë§ –ò–º—è *", placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤")
                    client_email = st.text_input("üìß Email", placeholder="example@mail.com")
                    # üî• –ù–û–í–û–ï –ü–û–õ–ï
                    client_chat_id = st.text_input("üí¨ ID Telegram –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", 
                                                 placeholder="123456789 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                                                 help="–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
                with col_b:
                    client_phone = st.text_input("üì± –¢–µ–ª–µ—Ñ–æ–Ω *", placeholder="+7 (999) 123-45-67")
                    client_telegram = st.text_input("üí¨ Telegram username", placeholder="@username")
                
                notes = st.text_area("üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", height=80)
                submit = st.form_submit_button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", use_container_width=True)
                
                if submit:
                    if not client_name or not client_phone:
                        st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω")
                    elif has_active_booking(client_phone):
                        st.error("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å")
                    else:
                        success, message = create_booking(
                            client_name, client_phone, client_email, 
                            client_telegram, str(selected_date), selected_time, notes,
                            client_chat_id  # üî• –ü–ï–†–ï–î–ê–ï–ú CHAT_ID
                        )
                        if success:
                            st.balloons()
                            # –ê–≤—Ç–æ–ª–æ–≥–∏–Ω
                            st.session_state.client_logged_in = True
                            st.session_state.client_phone = client_phone
                            st.session_state.client_name = client_name
                            st.session_state.current_tab = "üëÅÔ∏è –¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å"
                            
                            st.markdown(f"""
                            <div class="success-message">
                                <h3>üåø –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</h3>
                                <p><strong>üìÖ –î–∞—Ç–∞:</strong> {selected_date.strftime('%d.%m.%Y')}</p>
                                <p><strong>üïê –í—Ä–µ–º—è:</strong> {selected_time}</p>
                                <p><strong>üéâ –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!</strong></p>
                                <p><strong>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!</strong></p>
                            </div>
                            """, unsafe_allow_html=True)
                            st.rerun()
                        else:
                            st.error(message)
    
    with col2:
        render_info_panel()

# ============================================================================
# –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê: –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô)
# ============================================================================

else:
    st.title("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    
    client_info = get_client_info(st.session_state.client_phone)
    st.markdown(f"""
    <div class="welcome-header">
        <h1>üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {st.session_state.client_name}!</h1>
        <p>–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!</p>
    </div>
    """, unsafe_allow_html=True)
    
    # –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ü–û–†–Ø–î–û–ö –í–ö–õ–ê–î–û–ö - –î–û–ë–ê–í–õ–Ø–ï–ú TELEGRAM
    if st.session_state.current_tab == "üëÅÔ∏è –¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å":
        st.markdown("### üëÅÔ∏è –¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å")
        
        upcoming = get_upcoming_client_booking(st.session_state.client_phone)
        
        if upcoming:
            time_until = calculate_time_until(upcoming['booking_date'], upcoming['booking_time'])
            
            st.markdown(f"""
            <div class="booking-card">
                <h3>üïê –ë–ª–∏–∂–∞–π—à–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</h3>
                <p><strong>üìÖ –î–∞—Ç–∞:</strong> {format_date(upcoming['booking_date'])}</p>
                <p><strong>üïê –í—Ä–µ–º—è:</strong> {upcoming['booking_time']}</p>
                <p><strong>‚è±Ô∏è –î–æ –Ω–∞—á–∞–ª–∞:</strong> {format_timedelta(time_until)}</p>
                {f"<p><strong>üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> {upcoming['notes']}</p>" if upcoming['notes'] else ""}
            </div>
            """, unsafe_allow_html=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ Telegram
            telegram_connected = get_client_telegram_chat_id(st.session_state.client_phone)
            if not telegram_connected:
                st.warning("""
                ‚ö†Ô∏è **–í—ã –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!**
                
                –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Telegram –≤ —Ä–∞–∑–¥–µ–ª–µ "üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å:
                ‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å –¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                ‚Ä¢ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
                ‚Ä¢ ‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–∞—Ö
                """)
            
            if time_until.total_seconds() > BOOKING_RULES["MIN_CANCEL_MINUTES"] * 60:
                if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", type="secondary", use_container_width=True):
                    # –ü–æ–ª—É—á–∞–µ–º chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    chat_id = get_client_telegram_chat_id(st.session_state.client_phone)
                    success, message = cancel_booking(upcoming['id'], st.session_state.client_phone, chat_id)
                    if success:
                        st.success(message)
                        st.rerun()
                    else:
                        st.error(message)
            else:
                st.warning(f"‚ö†Ô∏è –û—Ç–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –∑–∞ {BOOKING_RULES['MIN_CANCEL_MINUTES']}+ –º–∏–Ω—É—Ç")
        else:
            st.info("üì≠ –ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π")
    
    elif st.session_state.current_tab == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        st.markdown("### üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        
        if client_info:
            with st.form("profile_form"):
                col1, col2 = st.columns(2)
                with col1:
                    new_name = st.text_input("üë§ –ò–º—è *", value=client_info['name'])
                    new_email = st.text_input("üìß Email", value=client_info['email'] or "")
                with col2:
                    st.text_input("üì± –¢–µ–ª–µ—Ñ–æ–Ω", value=st.session_state.client_phone, disabled=True)
                    new_telegram = st.text_input("üí¨ Telegram", value=client_info['telegram'] or "")
                
                submit = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True)
                
                if submit and new_name.strip():
                    # –í Supabase –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    st.info("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤—è—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å–∏")
    
    elif st.session_state.current_tab == "üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":  # üî• –ù–û–í–ê–Ø –í–ö–õ–ê–î–ö–ê
        render_telegram_section()
    
    elif st.session_state.current_tab == "üìÖ –ó–∞–ø–∏—Å—å":
        st.markdown("### üìÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å")
        
        if has_active_booking(st.session_state.client_phone):
            st.warning("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å'.")
        else:
            col1, col2 = st.columns([2, 1])
            
            with col1:
                selected_date = st.date_input("–î–∞—Ç–∞", min_value=datetime.now().date(),
                                            max_value=datetime.now().date() + timedelta(days=30),
                                            format="DD.MM.YYYY")
                
                available_slots = get_available_slots(str(selected_date))
                selected_time = render_time_slots(available_slots, "client_slot")
                
                if selected_time:
                    st.success(f"‚úÖ {selected_date.strftime('%d.%m.%Y')} –≤ {selected_time}")
                    
                    with st.form("quick_booking"):
                        notes = st.text_area("üí≠ –¢–µ–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", height=80)
                        submit = st.form_submit_button("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", use_container_width=True)
                        
                        if submit:
                            # –ü–æ–ª—É—á–∞–µ–º chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            chat_id = get_client_telegram_chat_id(st.session_state.client_phone)
                            
                            success, message = create_booking(
                                client_info['name'] if client_info else st.session_state.client_name,
                                st.session_state.client_phone,
                                client_info.get('email', '') if client_info else '',
                                client_info.get('telegram', '') if client_info else '',
                                str(selected_date), selected_time, notes,
                                chat_id  # üî• –ü–ï–†–ï–î–ê–ï–ú CHAT_ID
                            )
                            if success:
                                st.balloons()
                                st.success("üéâ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞!")
                                st.rerun()
                            else:
                                st.error(message)
            
            with col2:
                render_info_panel()
    
    elif st.session_state.current_tab == "üìä –ò—Å—Ç–æ—Ä–∏—è":
        st.markdown("### üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π")
        
        bookings = get_client_bookings(st.session_state.client_phone)
        
        if not bookings.empty:
            for idx, row in bookings.iterrows():
                status_info = STATUS_DISPLAY.get(row['status'], STATUS_DISPLAY['confirmed'])
                date_formatted = format_date(row['booking_date'])
                
                st.markdown(f"""
                <div class="booking-card">
                    <h4>{status_info['emoji']} {date_formatted} –≤ {row['booking_time']}</h4>
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span style="color: {status_info['color']}">{status_info['text']}</span></p>
                    {f"<p><strong>üí≠</strong> {row['notes']}</p>" if row['notes'] else ""}
                </div>
                """, unsafe_allow_html=True)
        else:
            st.info("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")