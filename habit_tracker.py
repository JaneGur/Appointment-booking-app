import streamlit as st
import sqlite3
from datetime import datetime, timedelta
import pandas as pd
import plotly.express as px
import hashlib
import re
from contextlib import contextmanager

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ö–û–ù–°–¢–ê–ù–¢–´
# ============================================================================

PAGE_CONFIG = {
    "page_title": "–ü—Å–∏—Ö–æ–ª–æ–≥ | –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏",
    "page_icon": "üåø",
    "layout": "wide",
    "initial_sidebar_state": "expanded"
}

ADMIN_PASSWORD_HASH = "240be518fabd2724ddb6f04eeb1da5967448d7e831c08c8fa822809f74c720a9"  # admin123

BOOKING_RULES = {
    "MIN_ADVANCE_HOURS": 1,  # –ú–∏–Ω–∏–º—É–º –∑–∞ 1 —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞
    "MIN_CANCEL_MINUTES": 30,  # –û—Ç–º–µ–Ω–∞ –º–∏–Ω–∏–º—É–º –∑–∞ 30 –º–∏–Ω—É—Ç
    "MAX_DAYS_AHEAD": 30,  # –ú–∞–∫—Å–∏–º—É–º –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
}

STATUS_DISPLAY = {
    'confirmed': {'emoji': '‚úÖ', 'text': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', 'color': '#88c8bc', 'bg_color': '#f0f9f7'},
    'cancelled': {'emoji': '‚ùå', 'text': '–û—Ç–º–µ–Ω–µ–Ω–∞', 'color': '#ff6b6b', 'bg_color': '#fff5f5'},
    'completed': {'emoji': '‚úÖ', 'text': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞', 'color': '#6ba292', 'bg_color': '#f0f9f7'}
}

WEEKDAY_MAP = {
    '0': '–í—Å', '1': '–ü–Ω', '2': '–í—Ç', 
    '3': '–°—Ä', '4': '–ß—Ç', '5': '–ü—Ç', '6': '–°–±'
}

# ============================================================================
# –°–¢–ò–õ–ò–ó–ê–¶–ò–Ø
# ============================================================================

def load_custom_css():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö CSS —Å—Ç–∏–ª–µ–π"""
    st.markdown("""
        <style>
        .main {
            padding: 0rem 1rem;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        }
        
        .stButton>button {
            width: 100%;
            border-radius: 12px;
            height: 3.2em;
            background: linear-gradient(135deg, #88c8bc 0%, #6ba292 100%);
            color: white;
            font-weight: 500;
            border: none;
            box-shadow: 0 4px 15px rgba(136, 200, 188, 0.3);
            transition: all 0.3s ease;
        }
        
        .stButton>button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(136, 200, 188, 0.4);
        }
        
        .stButton>button:disabled {
            background: #cccccc !important;
            color: #666666 !important;
            cursor: not-allowed;
            transform: none !important;
            box-shadow: none !important;
        }
        
        .booking-card {
            padding: 1.8rem;
            border-radius: 16px;
            background: rgba(255, 255, 255, 0.95);
            margin-bottom: 1.2rem;
            border-left: 4px solid #88c8bc;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            transition: transform 0.2s ease;
        }
        
        .booking-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 25px rgba(0, 0, 0, 0.12);
        }
        
        .stat-card {
            padding: 1.8rem;
            border-radius: 16px;
            background: linear-gradient(135deg, #88c8bc 0%, #a8d5ba 100%);
            color: white;
            text-align: center;
            box-shadow: 0 6px 20px rgba(136, 200, 188, 0.3);
        }
        
        .success-message {
            padding: 2rem;
            border-radius: 16px;
            background: linear-gradient(135deg, #a8d5ba 0%, #88c8bc 100%);
            color: white;
            box-shadow: 0 6px 20px rgba(136, 200, 188, 0.3);
            animation: fadeIn 0.5s ease-in;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .info-box {
            background: white;
            border-radius: 16px;
            padding: 1.8rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.06);
            border-left: 4px solid #88c8bc;
        }
        
        .warning-box {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            color: #856404;
        }
        
        .welcome-header {
            background: linear-gradient(135deg, #88c8bc 0%, #a8d5ba 100%);
            color: white;
            padding: 2rem;
            border-radius: 16px;
            margin-bottom: 2rem;
            text-align: center;
            animation: slideDown 0.5s ease-out;
        }
        
        @keyframes slideDown {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .quick-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin: 1.5rem 0;
        }
        
        .metric-card {
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        
        .time-slot-btn {
            transition: all 0.2s ease;
        }
        
        .time-slot-btn:hover {
            transform: scale(1.05);
        }
        </style>
    """, unsafe_allow_html=True)

# ============================================================================
# –£–¢–ò–õ–ò–¢–´ –ò –•–ï–õ–ü–ï–†–´
# ============================================================================

@contextmanager
def get_db_connection():
    """Context manager –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    conn = sqlite3.connect('bookings.db', check_same_thread=False)
    try:
        yield conn
    finally:
        conn.close()

def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    return hashlib.sha256(password.encode()).hexdigest()

def normalize_phone(phone: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    return re.sub(r'\D', '', phone)

def format_date(date_str: str, format_str: str = '%d.%m.%Y') -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
    try:
        return datetime.strptime(date_str, '%Y-%m-%d').strftime(format_str)
    except:
        return date_str

def calculate_time_until(date_str: str, time_str: str) -> timedelta:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–æ–±—ã—Ç–∏—è"""
    try:
        event_datetime = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        return event_datetime - datetime.now()
    except:
        return timedelta(0)

def format_timedelta(td: timedelta) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ timedelta –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    days = td.days
    hours, remainder = divmod(td.seconds, 3600)
    minutes, _ = divmod(remainder, 60)
    
    parts = []
    if days > 0:
        parts.append(f"{days}–¥")
    if hours > 0:
        parts.append(f"{hours}—á")
    if minutes > 0 or not parts:
        parts.append(f"{minutes}–º")
    
    return " ".join(parts)

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ============================================================================

st.set_page_config(**PAGE_CONFIG)
load_custom_css()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö session state"""
    defaults = {
        'admin_logged_in': False,
        'client_logged_in': False,
        'client_phone': "",
        'client_name': "",
        'current_tab': "–ó–∞–ø–∏—Å—å",
        'show_admin_login': False,
        'selected_time': None,
        'booking_date': None,
        'selected_client': None,
        'selected_client_name': None,
        'show_new_booking_form': False
    }
    
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value

init_session_state()

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•
# ============================================================================

def init_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with get_db_connection() as conn:
        c = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        c.execute('''CREATE TABLE IF NOT EXISTS settings
                     (id INTEGER PRIMARY KEY CHECK (id = 1),
                      work_start TEXT DEFAULT '09:00',
                      work_end TEXT DEFAULT '18:00',
                      session_duration INTEGER DEFAULT 60,
                      break_duration INTEGER DEFAULT 15)''')
        c.execute("INSERT OR IGNORE INTO settings (id) VALUES (1)")
        
        # –¢–∞–±–ª–∏—Ü–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        c.execute('''CREATE TABLE IF NOT EXISTS blocked_slots
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      block_date DATE NOT NULL,
                      block_time TEXT,
                      reason TEXT,
                      UNIQUE(block_date, block_time))''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π
        c.execute('''CREATE TABLE IF NOT EXISTS bookings
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      client_name TEXT NOT NULL,
                      client_phone TEXT NOT NULL,
                      client_email TEXT,
                      client_telegram TEXT,
                      booking_date DATE NOT NULL,
                      booking_time TEXT NOT NULL,
                      notes TEXT,
                      status TEXT DEFAULT 'confirmed',
                      phone_hash TEXT,
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                      UNIQUE(booking_date, booking_time))''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É phone_hash –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            c.execute("ALTER TABLE bookings ADD COLUMN phone_hash TEXT")
        except sqlite3.OperationalError:
            pass
        
        conn.commit()

init_database()

# ============================================================================
# –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –ù–ê–°–¢–†–û–ô–ö–ò
# ============================================================================

def get_settings():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("SELECT work_start, work_end, session_duration, break_duration FROM settings WHERE id = 1")
        return c.fetchone()

def update_settings(work_start: str, work_end: str, session_duration: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("UPDATE settings SET work_start = ?, work_end = ?, session_duration = ? WHERE id = 1", 
                  (work_start, work_end, session_duration))
        conn.commit()

# ============================================================================
# –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –ö–õ–ò–ï–ù–¢–´
# ============================================================================

def get_client_info(phone: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    with get_db_connection() as conn:
        phone_hash = hash_password(normalize_phone(phone))
        query = """SELECT client_name, client_email, client_telegram 
                   FROM bookings 
                   WHERE phone_hash = ? 
                   ORDER BY created_at DESC 
                   LIMIT 1"""
        c = conn.cursor()
        c.execute(query, (phone_hash,))
        result = c.fetchone()
        
        if result:
            return {
                'name': result[0],
                'email': result[1],
                'telegram': result[2]
            }
        return None

def update_client_profile(phone: str, name: str = None, email: str = None, telegram: str = None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    with get_db_connection() as conn:
        phone_hash = hash_password(normalize_phone(phone))
        c = conn.cursor()
        
        updates = []
        params = []
        
        if name:
            updates.append("client_name = ?")
            params.append(name)
        if email is not None:
            updates.append("client_email = ?")
            params.append(email)
        if telegram is not None:
            updates.append("client_telegram = ?")
            params.append(telegram)
        
        if updates:
            params.append(phone_hash)
            query = f"UPDATE bookings SET {', '.join(updates)} WHERE phone_hash = ?"
            c.execute(query, params)
            conn.commit()
            return True
        return False

def has_active_booking(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
    with get_db_connection() as conn:
        phone_hash = hash_password(normalize_phone(phone))
        query = """SELECT COUNT(*) FROM bookings 
                   WHERE phone_hash = ? 
                   AND status = 'confirmed' 
                   AND booking_date >= date('now')"""
        c = conn.cursor()
        c.execute(query, (phone_hash,))
        return c.fetchone()[0] > 0

def get_client_bookings(phone: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞"""
    with get_db_connection() as conn:
        phone_hash = hash_password(normalize_phone(phone))
        query = """SELECT id, client_name, booking_date, booking_time, notes, status, created_at 
                   FROM bookings 
                   WHERE phone_hash = ? 
                   ORDER BY booking_date DESC, booking_time DESC"""
        return pd.read_sql_query(query, conn, params=(phone_hash,))

def get_upcoming_client_booking(phone: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–π –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    with get_db_connection() as conn:
        phone_hash = hash_password(normalize_phone(phone))
        query = """SELECT id, client_name, booking_date, booking_time, notes, status 
                   FROM bookings 
                   WHERE phone_hash = ? AND booking_date >= date('now') AND status = 'confirmed'
                   ORDER BY booking_date, booking_time 
                   LIMIT 1"""
        c = conn.cursor()
        c.execute(query, (phone_hash,))
        return c.fetchone()

def get_all_clients():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    with get_db_connection() as conn:
        query = """
        SELECT 
            phone_hash,
            client_name,
            client_phone,
            client_email,
            client_telegram,
            COUNT(*) as total_bookings,
            SUM(CASE WHEN status = 'confirmed' AND booking_date >= date('now') THEN 1 ELSE 0 END) as upcoming_bookings,
            SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed_bookings,
            SUM(CASE WHEN status = 'cancelled' THEN 1 ELSE 0 END) as cancelled_bookings,
            MIN(created_at) as first_booking,
            MAX(created_at) as last_booking
        FROM bookings 
        GROUP BY phone_hash, client_name, client_phone, client_email, client_telegram
        ORDER BY last_booking DESC
        """
        return pd.read_sql_query(query, conn)

def get_client_booking_history(phone_hash):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    with get_db_connection() as conn:
        query = """
        SELECT 
            id,
            booking_date,
            booking_time,
            status,
            notes,
            created_at
        FROM bookings 
        WHERE phone_hash = ?
        ORDER BY booking_date DESC, booking_time DESC
        """
        return pd.read_sql_query(query, conn, params=(phone_hash,))

# ============================================================================
# –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –ó–ê–ü–ò–°–ò
# ============================================================================

def is_time_available(selected_date: str, time_slot: str) -> tuple:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        booking_datetime = datetime.strptime(f"{selected_date} {time_slot}", "%Y-%m-%d %H:%M")
        time_diff = (booking_datetime - datetime.now()).total_seconds()
        
        min_advance = BOOKING_RULES["MIN_ADVANCE_HOURS"] * 3600
        
        if time_diff < 0:
            return False, "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ"
        elif time_diff < min_advance:
            return False, f"‚ùå –ó–∞–ø–∏—Å—å –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ {BOOKING_RULES['MIN_ADVANCE_HOURS']} —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞"
        else:
            return True, "‚úÖ –í—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–Ω–æ"
    except ValueError:
        return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏"

def get_available_slots(date: str) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
    settings = get_settings()
    work_start = datetime.strptime(settings[0], '%H:%M').time()
    work_end = datetime.strptime(settings[1], '%H:%M').time()
    session_duration = settings[2]
    
    with get_db_connection() as conn:
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–Ω—è
        c.execute("SELECT id FROM blocked_slots WHERE block_date = ? AND block_time IS NULL", (date,))
        if c.fetchone():
            return []
        
        slots = []
        current_time = datetime.combine(datetime.today(), work_start)
        end_time = datetime.combine(datetime.today(), work_end)
        
        while current_time < end_time:
            time_slot = current_time.strftime('%H:%M')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            c.execute("SELECT id FROM bookings WHERE booking_date = ? AND booking_time = ? AND status != 'cancelled'", 
                     (date, time_slot))
            is_booked = c.fetchone() is not None
            
            c.execute("SELECT id FROM blocked_slots WHERE block_date = ? AND block_time = ?", 
                     (date, time_slot))
            is_blocked = c.fetchone() is not None
            
            time_available, _ = is_time_available(date, time_slot)
            
            if not is_booked and not is_blocked and time_available:
                slots.append(time_slot)
            
            current_time += timedelta(minutes=session_duration)
        
        return slots

def create_booking(client_name: str, client_phone: str, client_email: str, 
                  client_telegram: str, date: str, time_slot: str, notes: str = "") -> tuple:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏
    if has_active_booking(client_phone):
        return False, "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
    time_available, reason = is_time_available(date, time_slot)
    if not time_available:
        return False, reason
    
    with get_db_connection() as conn:
        try:
            c = conn.cursor()
            phone_hash = hash_password(normalize_phone(client_phone))
            c.execute("""INSERT INTO bookings 
                        (client_name, client_phone, client_email, client_telegram, 
                         booking_date, booking_time, notes, phone_hash) 
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
                      (client_name, client_phone, client_email, client_telegram, 
                       date, time_slot, notes, phone_hash))
            conn.commit()
            return True, "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
        except sqlite3.IntegrityError:
            return False, "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ"

def create_booking_by_admin(client_name: str, client_phone: str, client_email: str, 
                           client_telegram: str, date: str, time_slot: str, notes: str = ""):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)"""
    with get_db_connection() as conn:
        try:
            c = conn.cursor()
            phone_hash = hash_password(normalize_phone(client_phone))
            c.execute("""INSERT INTO bookings 
                        (client_name, client_phone, client_email, client_telegram, 
                         booking_date, booking_time, notes, phone_hash) 
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
                      (client_name, client_phone, client_email, client_telegram, 
                       date, time_slot, notes, phone_hash))
            conn.commit()
            return True, "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
        except sqlite3.IntegrityError:
            return False, "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ"

def cancel_booking(booking_id: int, phone: str) -> tuple:
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏"""
    with get_db_connection() as conn:
        phone_hash = hash_password(normalize_phone(phone))
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        c.execute("SELECT booking_date, booking_time FROM bookings WHERE id = ? AND phone_hash = ?", 
                  (booking_id, phone_hash))
        booking = c.fetchone()
        
        if not booking:
            return False, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞
        time_until = calculate_time_until(booking[0], booking[1])
        min_cancel = BOOKING_RULES["MIN_CANCEL_MINUTES"] * 60
        
        if time_until.total_seconds() < min_cancel:
            return False, f"–û—Ç–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º –∑–∞ {BOOKING_RULES['MIN_CANCEL_MINUTES']} –º–∏–Ω—É—Ç"
        
        # –û—Ç–º–µ–Ω—è–µ–º
        c.execute("UPDATE bookings SET status = 'cancelled' WHERE id = ?", (booking_id,))
        conn.commit()
        return True, "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞"

def delete_booking(booking_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("DELETE FROM bookings WHERE id = ?", (booking_id,))
        conn.commit()

def get_all_bookings(date_from: str = None, date_to: str = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ"""
    with get_db_connection() as conn:
        if date_from and date_to:
            query = """SELECT id, client_name, client_phone, client_email, client_telegram, 
                             booking_date, booking_time, notes, status 
                       FROM bookings 
                       WHERE booking_date BETWEEN ? AND ?
                       ORDER BY booking_date, booking_time"""
            return pd.read_sql_query(query, conn, params=(date_from, date_to))
        elif date_from:
            query = """SELECT id, client_name, client_phone, client_email, client_telegram, 
                             booking_date, booking_time, notes, status 
                       FROM bookings 
                       WHERE booking_date >= ?
                       ORDER BY booking_date, booking_time"""
            return pd.read_sql_query(query, conn, params=(date_from,))
        else:
            query = """SELECT id, client_name, client_phone, client_email, client_telegram, 
                             booking_date, booking_time, notes, status 
                       FROM bookings 
                       ORDER BY booking_date DESC, booking_time DESC"""
            return pd.read_sql_query(query, conn)

# ============================================================================
# –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–Ø–ú–ò (–∞–¥–º–∏–Ω)
# ============================================================================

def update_booking_datetime(booking_id: int, new_date: str, new_time: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏"""
    with get_db_connection() as conn:
        try:
            c = conn.cursor()
            c.execute("UPDATE bookings SET booking_date = ?, booking_time = ? WHERE id = ?", 
                     (new_date, new_time, booking_id))
            conn.commit()
            return True, "‚úÖ –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
        except sqlite3.IntegrityError:
            return False, "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ"

def update_booking_notes(booking_id: int, new_notes: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–ø–∏—Å–∏"""
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("UPDATE bookings SET notes = ? WHERE id = ?", (new_notes, booking_id))
        conn.commit()
        return True, "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω"

def update_booking_status(booking_id: int, new_status: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏"""
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("UPDATE bookings SET status = ? WHERE id = ?", (new_status, booking_id))
        conn.commit()
        return True, f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {STATUS_DISPLAY[new_status]['text']}"

# ============================================================================
# –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê: –ë–õ–û–ö–ò–†–û–í–ö–ò
# ============================================================================

def block_date(date: str, reason: str = "–í—ã—Ö–æ–¥–Ω–æ–π") -> bool:
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"""
    with get_db_connection() as conn:
        try:
            c = conn.cursor()
            c.execute("INSERT INTO blocked_slots (block_date, reason) VALUES (?, ?)", (date, reason))
            conn.commit()
            return True
        except sqlite3.IntegrityError:
            return False

def unblock_date(date: str):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"""
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("DELETE FROM blocked_slots WHERE block_date = ? AND block_time IS NULL", (date,))
        conn.commit()

def get_blocked_dates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç"""
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("SELECT block_date, reason FROM blocked_slots WHERE block_time IS NULL ORDER BY block_date")
        return c.fetchall()

def block_time_slot(date: str, time_slot: str, reason: str = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã") -> bool:
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
    with get_db_connection() as conn:
        try:
            c = conn.cursor()
            c.execute("INSERT INTO blocked_slots (block_date, block_time, reason) VALUES (?, ?, ?)", 
                      (date, time_slot, reason))
            conn.commit()
            return True
        except sqlite3.IntegrityError:
            return False

def unblock_time_slot(block_id: int):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("DELETE FROM blocked_slots WHERE id = ?", (block_id,))
        conn.commit()

def get_blocked_slots():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
    with get_db_connection() as conn:
        query = """SELECT id, block_date, block_time, reason FROM blocked_slots 
                   WHERE block_time IS NOT NULL ORDER BY block_date, block_time"""
        return pd.read_sql_query(query, conn)

# ============================================================================
# –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê
# ============================================================================

@st.cache_data(ttl=60)
def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    with get_db_connection() as conn:
        total = pd.read_sql_query("SELECT COUNT(*) as count FROM bookings", conn).iloc[0]['count']
        
        upcoming = pd.read_sql_query(
            "SELECT COUNT(*) as count FROM bookings WHERE booking_date >= date('now') AND status = 'confirmed'", 
            conn
        ).iloc[0]['count']
        
        this_month = pd.read_sql_query(
            "SELECT COUNT(*) as count FROM bookings WHERE strftime('%Y-%m', booking_date) = strftime('%Y-%m', 'now')", 
            conn
        ).iloc[0]['count']
        
        this_week = pd.read_sql_query(
            "SELECT COUNT(*) as count FROM bookings WHERE booking_date >= date('now', '-7 days')",
            conn
        ).iloc[0]['count']
        
        return total, upcoming, this_month, this_week

@st.cache_data(ttl=300)
def get_analytics_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    with get_db_connection() as conn:
        monthly_stats = pd.read_sql_query("""
            SELECT 
                strftime('%Y-%m', booking_date) as month,
                COUNT(*) as bookings_count,
                COUNT(DISTINCT client_phone) as unique_clients
            FROM bookings 
            WHERE status != 'cancelled'
            GROUP BY strftime('%Y-%m', booking_date)
            ORDER BY month
        """, conn)
        
        weekday_stats = pd.read_sql_query("""
            SELECT 
                strftime('%w', booking_date) as weekday,
                COUNT(*) as bookings_count
            FROM bookings 
            WHERE status != 'cancelled'
            GROUP BY strftime('%w', booking_date)
            ORDER BY weekday
        """, conn)
        
        time_stats = pd.read_sql_query("""
            SELECT 
                substr(booking_time, 1, 2) as hour,
                COUNT(*) as bookings_count
            FROM bookings 
            WHERE status != 'cancelled'
            GROUP BY substr(booking_time, 1, 2)
            ORDER BY hour
        """, conn)
        
        return monthly_stats, weekday_stats, time_stats

# ============================================================================
# –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
# ============================================================================

def check_admin_password(password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return hash_password(password) == ADMIN_PASSWORD_HASH

def client_login(phone: str) -> bool:
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    phone_hash = hash_password(normalize_phone(phone))
    
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("SELECT client_name FROM bookings WHERE phone_hash = ? ORDER BY created_at DESC LIMIT 1", 
                  (phone_hash,))
        result = c.fetchone()
        
        if result:
            st.session_state.client_logged_in = True
            st.session_state.client_phone = phone
            st.session_state.client_name = result[0]
            return True
        return False

def client_logout():
    """–í—ã—Ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞"""
    st.session_state.client_logged_in = False
    st.session_state.client_phone = ""
    st.session_state.client_name = ""
    st.session_state.current_tab = "–ó–∞–ø–∏—Å—å"

def admin_login():
    """–í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    st.session_state.admin_logged_in = True
    st.session_state.show_admin_login = False

def admin_logout():
    """–í—ã—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    st.session_state.admin_logged_in = False

# ============================================================================
# UI –ö–û–ú–ü–û–ù–ï–ù–¢–´
# ============================================================================

def render_booking_card(row, date, show_actions=True):
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–ø–∏—Å–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —á–∏—Å—Ç–æ–≥–æ Streamlit"""
    status_info = STATUS_DISPLAY.get(row['status'], STATUS_DISPLAY['confirmed'])
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    unique_key = f"delete_{date}_{row['booking_time']}_{row['id']}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Å—Ç–∏–ª–µ–º
    with st.container():
        col1, col2 = st.columns([4, 1]) if show_actions else st.columns([1])
        
        with col1:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ –∏–º–µ–Ω–µ–º
            st.markdown(f"**{status_info['emoji']} {row['booking_time']} - {row['client_name']}**")
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            st.text(f"üì± {row['client_phone']}")
            
            if row.get('client_email'):
                st.text(f"üìß {row['client_email']}")
                
            if row.get('client_telegram'):
                st.text(f"üí¨ {row['client_telegram']}")
                
            if row.get('notes'):
                st.text(f"üí≠ {row['notes']}")
            
            # –°—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–æ–º
            st.markdown(f"**–°—Ç–∞—Ç—É—Å:** <span style='color: {status_info['color']};'>{status_info['text']}</span>", 
                       unsafe_allow_html=True)
        
        if show_actions and col2:
            with col2:
                if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=unique_key, use_container_width=True):
                    delete_booking(row['id'])
                    st.success("‚úÖ –£–¥–∞–ª–µ–Ω–æ!")
                    st.rerun()
        
        st.markdown("---")

def render_time_slots(available_slots, key_prefix="slot"):
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
    if not available_slots:
        st.warning("üòî –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        return None
    
    st.markdown("#### üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è")
    st.info("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã")
    
    cols = st.columns(4)
    for idx, time_slot in enumerate(available_slots):
        with cols[idx % 4]:
            if st.button(f"üïê {time_slot}", key=f"{key_prefix}_{time_slot}", 
                        use_container_width=True, type="primary"):
                st.session_state.selected_time = time_slot
                st.rerun()
    
    return st.session_state.get('selected_time')

# ============================================================================
# –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨
# ============================================================================

with st.sidebar:
    st.markdown("# üåø –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    
    if st.session_state.client_logged_in:
        # –ö–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –º–µ–Ω—é
        if st.session_state.client_name:
            st.markdown(f"### üëã {st.session_state.client_name}!")
        
        tabs = st.radio(
            "–ú–µ–Ω—é:",
            ["üìÖ –ó–∞–ø–∏—Å—å", "üëÅÔ∏è –¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å", "üìä –ò—Å—Ç–æ—Ä–∏—è", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"],
            key="client_tabs"
        )
        st.session_state.current_tab = tabs
        
        st.markdown("---")
        if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True):
            client_logout()
            st.rerun()
    
    elif st.session_state.admin_logged_in:
        # –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        total, upcoming, this_month, this_week = get_stats()
        st.metric("üìã –í—Å–µ–≥–æ", total)
        st.metric("‚è∞ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö", upcoming)
        st.metric("üìÖ –ó–∞ –º–µ—Å—è—Ü", this_month)
        
        st.markdown("---")
        if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True):
            admin_logout()
            st.rerun()
    
    else:
        # –ì–æ—Å—Ç–µ–≤–æ–µ –º–µ–Ω—é
        st.markdown("### üë§ –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –∑–æ–Ω–∞")
        st.info("–î–ª—è –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
    
    # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É
    st.markdown("---")
    st.markdown("### üë©‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    
    if st.session_state.admin_logged_in:
        st.success("‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    else:
        if st.button("üîê –í—Ö–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", use_container_width=True, type="secondary"):
            st.session_state.show_admin_login = True
            st.rerun()
    
    if st.session_state.show_admin_login:
        st.markdown("---")
        with st.form("admin_sidebar_login", clear_on_submit=True):
            password = st.text_input("–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", type="password")
            submit = st.form_submit_button("–í–æ–π—Ç–∏", use_container_width=True)
            
            if submit:
                if password and check_admin_password(password):
                    admin_login()
                    st.success("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
                    st.rerun()
                elif password:
                    st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        
        if st.button("‚ùå –û—Ç–º–µ–Ω–∞", use_container_width=True, type="secondary"):
            st.session_state.show_admin_login = False
            st.rerun()

# ============================================================================
# –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê: –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
# ============================================================================

if st.session_state.admin_logged_in:
    st.title("üë©‚Äçüíº –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    tabs = st.tabs(["üìã –ó–∞–ø–∏—Å–∏", "üë• –ö–ª–∏–µ–Ω—Ç—ã", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
    
    # ========== –í–ö–õ–ê–î–ö–ê: –ó–ê–ü–ò–°–ò ==========
    with tabs[0]:
        st.markdown("### üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏")
        
        # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∑–∞–ø–∏—Å–µ–π
        col1, col2 = st.columns([2, 1])
        with col1:
            date_filter = st.selectbox(
                "üìÖ –ü–µ—Ä–∏–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                ["–í—Å–µ –¥–∞—Ç—ã", "–°–µ–≥–æ–¥–Ω—è", "–ù–∞ –Ω–µ–¥–µ–ª—é", "–ù–∞ –º–µ—Å—è—Ü"]
            )
        with col2:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
                get_stats.clear()
                st.rerun()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        today = datetime.now().date()
        
        if date_filter == "–°–µ–≥–æ–¥–Ω—è":
            date_from = str(today)
            date_to = str(today)
        elif date_filter == "–ù–∞ –Ω–µ–¥–µ–ª—é":
            date_from = str(today)
            date_to = str(today + timedelta(days=7))
        elif date_filter == "–ù–∞ –º–µ—Å—è—Ü":
            date_from = str(today)
            date_to = str(today + timedelta(days=30))
        else:
            date_from = None
            date_to = None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
        df = get_all_bookings()
        
        if not df.empty:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
            if date_from and date_to:
                df = df[(df['booking_date'] >= date_from) & (df['booking_date'] <= date_to)]
            elif date_from:
                df = df[df['booking_date'] >= date_from]
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            df = df.sort_values(['booking_date', 'booking_time'], ascending=[True, True])
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
            st.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
            
            if not df.empty:
                df['booking_date'] = pd.to_datetime(df['booking_date']).dt.strftime('%d.%m.%Y')
                
                for date in sorted(df['booking_date'].unique()):
                    st.markdown(f"#### üìÖ {date}")
                    date_bookings = df[df['booking_date'] == date]
                    
                    for idx, row in date_bookings.iterrows():
                        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
                        render_booking_card(row, date)
                    
                    st.markdown("---")
            else:
                st.info("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")
        else:
            st.info("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    # ========== –í–ö–õ–ê–î–ö–ê: –ö–õ–ò–ï–ù–¢–´ ==========
    with tabs[1]:
        st.markdown("### üë• –ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
        
        # –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
        col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
        with col1:
            search_query = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω...")
        with col2:
            show_only_active = st.checkbox("–¢–æ–ª—å–∫–æ —Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º–∏", value=False)
        with col3:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
                st.rerun()
        with col4:
            if st.button("‚ûï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", use_container_width=True, type="primary"):
                st.session_state.show_new_booking_form = True
        
        # –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        if st.session_state.get('show_new_booking_form'):
            st.markdown("---")
            st.markdown("#### üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏")
            
            with st.form("new_booking_admin_form"):
                col_a, col_b = st.columns(2)
                with col_a:
                    new_client_name = st.text_input("üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ *", placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤")
                    new_client_email = st.text_input("üìß Email", placeholder="example@mail.com")
                    booking_date = st.date_input("üìÖ –î–∞—Ç–∞", min_value=datetime.now().date(), 
                                               max_value=datetime.now().date() + timedelta(days=30))
                with col_b:
                    new_client_phone = st.text_input("üì± –¢–µ–ª–µ—Ñ–æ–Ω *", placeholder="+7 (999) 123-45-67")
                    new_client_telegram = st.text_input("üí¨ Telegram", placeholder="@username")
                    booking_time = st.time_input("üïê –í—Ä–µ–º—è", value=datetime.strptime("09:00", "%H:%M").time())
                
                booking_notes = st.text_area("üí≠ –ü—Ä–∏—á–∏–Ω–∞ –≤—Å—Ç—Ä–µ—á–∏ / –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", height=100)
                
                col_submit, col_cancel = st.columns([1, 1])
                with col_submit:
                    submit_booking = st.form_submit_button("‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å", use_container_width=True)
                with col_cancel:
                    if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞", use_container_width=True):
                        st.session_state.show_new_booking_form = False
                        st.rerun()
                
                if submit_booking:
                    if not new_client_name or not new_client_phone:
                        st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞")
                    else:
                        success, message = create_booking_by_admin(
                            new_client_name, new_client_phone, new_client_email,
                            new_client_telegram, str(booking_date), booking_time.strftime("%H:%M"), booking_notes
                        )
                        if success:
                            st.success(message)
                            st.session_state.show_new_booking_form = False
                            st.rerun()
                        else:
                            st.error(message)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö
        clients_df = get_all_clients()
        
        if not clients_df.empty:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if search_query:
                mask = (clients_df['client_name'].str.contains(search_query, case=False, na=False)) | \
                       (clients_df['client_phone'].str.contains(search_query, case=False, na=False))
                clients_df = clients_df[mask]
            
            if show_only_active:
                clients_df = clients_df[clients_df['upcoming_bookings'] > 0]
            
            st.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients_df)}")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
            for idx, client in clients_df.iterrows():
                with st.expander(f"üë§ {client['client_name']} - üì± {client['client_phone']}", expanded=False):
                    col1, col2, col3 = st.columns([2, 1, 1])
                    
                    with col1:
                        st.markdown("**–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
                        st.write(f"üìß Email: {client['client_email'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                        st.write(f"üí¨ Telegram: {client['client_telegram'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                        
                        st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                        col_stat1, col_stat2, col_stat3, col_stat4 = st.columns(4)
                        with col_stat1:
                            st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", client['total_bookings'])
                        with col_stat2:
                            st.metric("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ", client['upcoming_bookings'])
                        with col_stat3:
                            st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–æ", client['completed_bookings'])
                        with col_stat4:
                            st.metric("–û—Ç–º–µ–Ω–µ–Ω–æ", client['cancelled_bookings'])
                    
                    with col2:
                        st.markdown("**–î–∞—Ç—ã:**")
                        first_booking = datetime.strptime(client['first_booking'][:10], '%Y-%m-%d').strftime('%d.%m.%Y')
                        last_booking = datetime.strptime(client['last_booking'][:10], '%Y-%m-%d').strftime('%d.%m.%Y')
                        st.write(f"üìÖ –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {first_booking}")
                        st.write(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {last_booking}")
                    
                    with col3:
                        if st.button("üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π", key=f"history_{client['phone_hash']}", use_container_width=True):
                            st.session_state.selected_client = client['phone_hash']
                            st.session_state.selected_client_name = client['client_name']
                    
                    # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                    if st.session_state.get('selected_client') == client['phone_hash']:
                        st.markdown("---")
                        st.markdown(f"#### üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π: {client['client_name']}")
                        
                        history_df = get_client_booking_history(client['phone_hash'])
                        if not history_df.empty:
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                            history_df['booking_date'] = pd.to_datetime(history_df['booking_date'])
                            history_df['formatted_date'] = history_df['booking_date'].dt.strftime('%d.%m.%Y')
                            history_df['created_at'] = pd.to_datetime(history_df['created_at']).dt.strftime('%d.%m.%Y %H:%M')
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                            for _, booking in history_df.iterrows():
                                status_info = STATUS_DISPLAY.get(booking['status'], STATUS_DISPLAY['confirmed'])
                                
                                with st.container():
                                    col_hist1, col_hist2, col_hist3 = st.columns([3, 1, 1])
                                    
                                    with col_hist1:
                                        st.write(f"**{booking['formatted_date']} {booking['booking_time']}** - {status_info['emoji']} {status_info['text']}")
                                        if booking['notes']:
                                            st.info(f"üí≠ {booking['notes']}")
                                    
                                    with col_hist2:
                                        st.write(f"üìÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {booking['created_at']}")
                                    
                                    with col_hist3:
                                        # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—å—é
                                        with st.popover("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", use_container_width=True):
                                            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                                            st.markdown("**üïê –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å:**")
                                            new_date = st.date_input("–ù–æ–≤–∞—è –¥–∞—Ç–∞", 
                                                                   value=booking['booking_date'].date(),
                                                                   min_value=datetime.now().date(),
                                                                   key=f"date_{booking['id']}")
                                            new_time = st.time_input("–ù–æ–≤–æ–µ –≤—Ä–µ–º—è", 
                                                                   value=datetime.strptime(booking['booking_time'], "%H:%M").time(),
                                                                   key=f"time_{booking['id']}")
                                            if st.button("üïê –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", key=f"reschedule_{booking['id']}", use_container_width=True):
                                                success, message = update_booking_datetime(
                                                    booking['id'], str(new_date), new_time.strftime("%H:%M")
                                                )
                                                if success:
                                                    st.success(message)
                                                    st.rerun()
                                                else:
                                                    st.error(message)
                                            
                                            st.markdown("---")
                                            
                                            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                                            st.markdown("**üí≠ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:**")
                                            new_notes = st.text_area("–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", 
                                                                   value=booking['notes'] or "",
                                                                   height=80,
                                                                   key=f"notes_{booking['id']}")
                                            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f"save_notes_{booking['id']}", use_container_width=True):
                                                success, message = update_booking_notes(booking['id'], new_notes)
                                                if success:
                                                    st.success(message)
                                                    st.rerun()
                                            
                                            st.markdown("---")
                                            
                                            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                                            st.markdown("**üìä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å:**")
                                            status_options = {
                                                'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
                                                'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞', 
                                                'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞'
                                            }
                                            new_status = st.selectbox(
                                                "–°—Ç–∞—Ç—É—Å",
                                                options=list(status_options.keys()),
                                                format_func=lambda x: status_options[x],
                                                index=list(status_options.keys()).index(booking['status']),
                                                key=f"status_{booking['id']}"
                                            )
                                            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", key=f"update_status_{booking['id']}", use_container_width=True):
                                                success, message = update_booking_status(booking['id'], new_status)
                                                if success:
                                                    st.success(message)
                                                    st.rerun()
                                    
                                    st.markdown("---")
                        else:
                            st.info("üì≠ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –ø—É—Å—Ç–∞")
            
            # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
            st.markdown("---")
            st.markdown("### üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º")
            
            col_sum1, col_sum2, col_sum3, col_sum4 = st.columns(4)
            with col_sum1:
                st.metric("–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤", len(clients_df))
            with col_sum2:
                active_clients = len(clients_df[clients_df['upcoming_bookings'] > 0])
                st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", active_clients)
            with col_sum3:
                avg_bookings = clients_df['total_bookings'].mean()
                st.metric("–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π", f"{avg_bookings:.1f}")
            with col_sum4:
                total_bookings = clients_df['total_bookings'].sum()
                st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", total_bookings)
                
        else:
            st.info("üì≠ –í –±–∞–∑–µ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    # ========== –í–ö–õ–ê–î–ö–ê: –ù–ê–°–¢–†–û–ô–ö–ò ==========
    with tabs[2]:
        st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        
        settings = get_settings()
        
        col1, col2, col3 = st.columns(3)
        with col1:
            work_start = st.time_input("üïê –ù–∞—á–∞–ª–æ", value=datetime.strptime(settings[0], '%H:%M').time())
        with col2:
            work_end = st.time_input("üïê –ö–æ–Ω–µ—Ü", value=datetime.strptime(settings[1], '%H:%M').time())
        with col3:
            session_duration = st.number_input("‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)", 
                                              min_value=15, max_value=180, value=settings[2], step=15)
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True):
            update_settings(work_start.strftime('%H:%M'), work_end.strftime('%H:%M'), session_duration)
            st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            st.rerun()
    
    # ========== –í–ö–õ–ê–î–ö–ê: –ë–õ–û–ö–ò–†–û–í–ö–ò ==========
    with tabs[3]:
        st.markdown("### üö´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üìÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–Ω–µ–π")
            with st.form("block_day_form"):
                block_date_input = st.date_input("–î–∞—Ç–∞", min_value=datetime.now().date())
                block_reason = st.text_input("–ü—Ä–∏—á–∏–Ω–∞", value="–í—ã—Ö–æ–¥–Ω–æ–π")
                submit_block = st.form_submit_button("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True)
                
                if submit_block:
                    if block_date(str(block_date_input), block_reason):
                        st.success(f"‚úÖ –î–µ–Ω—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
                        st.rerun()
                    else:
                        st.error("‚ùå –î–µ–Ω—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            
            st.markdown("#### üïê –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏")
            with st.form("block_time_form"):
                time_block_date = st.date_input("–î–∞—Ç–∞", min_value=datetime.now().date(), key="time_date")
                time_block_time = st.time_input("–í—Ä–µ–º—è", value=datetime.strptime("09:00", "%H:%M").time())
                time_block_reason = st.text_input("–ü—Ä–∏—á–∏–Ω–∞", value="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã", key="time_reason")
                submit_time_block = st.form_submit_button("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True)
                
                if submit_time_block:
                    if block_time_slot(str(time_block_date), time_block_time.strftime("%H:%M"), time_block_reason):
                        st.success(f"‚úÖ –í—Ä–µ–º—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!")
                        st.rerun()
                    else:
                        st.error("‚ùå –°–ª–æ—Ç —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        
        with col2:
            st.markdown("#### üìã –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–∏")
            blocked_dates = get_blocked_dates()
            if blocked_dates:
                for block_date, reason in blocked_dates:
                    col_a, col_b = st.columns([3, 1])
                    with col_a:
                        st.info(f"**{format_date(block_date)}** - {reason}")
                    with col_b:
                        if st.button("üóëÔ∏è", key=f"unblock_{block_date}", use_container_width=True):
                            unblock_date(block_date)
                            st.success("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
                            st.rerun()
            else:
                st.info("üì≠ –ù–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")
            
            st.markdown("#### üïê –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã")
            blocked_slots_df = get_blocked_slots()
            if not blocked_slots_df.empty:
                for idx, row in blocked_slots_df.iterrows():
                    col_a, col_b = st.columns([3, 1])
                    with col_a:
                        st.warning(f"**{format_date(row['block_date'])} {row['block_time']}** - {row['reason']}")
                    with col_b:
                        if st.button("üóëÔ∏è", key=f"unblock_slot_{row['id']}", use_container_width=True):
                            unblock_time_slot(row['id'])
                            st.success("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
                            st.rerun()
            else:
                st.info("üì≠ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
    
    # ========== –í–ö–õ–ê–î–ö–ê: –ê–ù–ê–õ–ò–¢–ò–ö–ê ==========
    with tabs[4]:
        st.markdown("### üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total, upcoming, this_month, this_week = get_stats()
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("üìä –í—Å–µ–≥–æ", total)
        col2.metric("‚è∞ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö", upcoming)
        col3.metric("üìÖ –ó–∞ –º–µ—Å—è—Ü", this_month)
        col4.metric("üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é", this_week)
        
        st.markdown("---")
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        monthly_stats, weekday_stats, time_stats = get_analytics_data()
        
        if not monthly_stats.empty:
            fig_monthly = px.bar(monthly_stats, x='month', y='bookings_count',
                               title='üìà –ó–∞–ø–∏—Å–∏ –ø–æ –º–µ—Å—è—Ü–∞–º',
                               labels={'month': '–ú–µ—Å—è—Ü', 'bookings_count': '–ó–∞–ø–∏—Å–∏'})
            fig_monthly.update_traces(marker_color='#88c8bc')
            st.plotly_chart(fig_monthly, use_container_width=True)
        
        if not weekday_stats.empty:
            weekday_stats['weekday_name'] = weekday_stats['weekday'].map(WEEKDAY_MAP)
            fig_weekday = px.pie(weekday_stats, values='bookings_count', names='weekday_name',
                                title='üìÖ –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏')
            st.plotly_chart(fig_weekday, use_container_width=True)

# ============================================================================
# –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê: –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –ß–ê–°–¢–¨
# ============================================================================

elif not st.session_state.client_logged_in:
    # ========== –§–û–†–ú–ê –ó–ê–ü–ò–°–ò –î–õ–Ø –ì–û–°–¢–ï–ô ==========
    st.title("üåø –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
        st.markdown("#### üîê –£–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏—Å—å?")
        with st.form("client_login_form"):
            login_phone = st.text_input("üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", placeholder="+7 (999) 123-45-67")
            login_submit = st.form_submit_button("–í–æ–π—Ç–∏", use_container_width=True)
            
            if login_submit and login_phone:
                if client_login(login_phone):
                    st.success("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
                    st.rerun()
                else:
                    st.error("‚ùå –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        st.markdown("---")
        st.markdown("#### üìÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å")
        
        # –í—ã–±–æ—Ä –¥–∞—Ç—ã
        min_date = datetime.now().date()
        max_date = min_date + timedelta(days=BOOKING_RULES["MAX_DAYS_AHEAD"])
        
        selected_date = st.date_input("–î–∞—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", min_value=min_date, 
                                      max_value=max_date, value=min_date, format="DD.MM.YYYY")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã
        available_slots = get_available_slots(str(selected_date))
        selected_time = render_time_slots(available_slots, "guest_slot")
        
        if selected_time:
            st.success(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: **{selected_date.strftime('%d.%m.%Y')}** –≤ **{selected_time}**")
            
            st.markdown("#### üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ")
            with st.form("booking_form"):
                col_a, col_b = st.columns(2)
                with col_a:
                    client_name = st.text_input("üë§ –ò–º—è *", placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤")
                    client_email = st.text_input("üìß Email", placeholder="example@mail.com")
                with col_b:
                    client_phone = st.text_input("üì± –¢–µ–ª–µ—Ñ–æ–Ω *", placeholder="+7 (999) 123-45-67")
                    client_telegram = st.text_input("üí¨ Telegram", placeholder="@username")
                
                notes = st.text_area("üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", height=80)
                submit = st.form_submit_button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", use_container_width=True)
                
                if submit:
                    if not client_name or not client_phone:
                        st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω")
                    elif has_active_booking(client_phone):
                        st.error("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å")
                    else:
                        success, message = create_booking(client_name, client_phone, client_email, 
                                                         client_telegram, str(selected_date), selected_time, notes)
                        if success:
                            st.balloons()
                            # –ê–≤—Ç–æ–ª–æ–≥–∏–Ω
                            st.session_state.client_logged_in = True
                            st.session_state.client_phone = client_phone
                            st.session_state.client_name = client_name
                            st.session_state.current_tab = "üëÅÔ∏è –¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å"
                            
                            st.markdown(f"""
                            <div class="success-message">
                                <h3>üåø –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</h3>
                                <p><strong>üìÖ –î–∞—Ç–∞:</strong> {selected_date.strftime('%d.%m.%Y')}</p>
                                <p><strong>üïê –í—Ä–µ–º—è:</strong> {selected_time}</p>
                                <p><strong>üéâ –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!</strong></p>
                            </div>
                            """, unsafe_allow_html=True)
                            st.rerun()
                        else:
                            st.error(message)
    
    with col2:
        settings = get_settings()
        st.markdown(f"""
        <div class="info-box">
            <h4>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
            <p><strong>‚è∞ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:</strong><br>{settings[0]} - {settings[1]}</p>
            <p><strong>‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong><br>{settings[2]} –º–∏–Ω—É—Ç</p>
            <p><strong>üíª –§–æ—Ä–º–∞—Ç:</strong><br>–û–Ω–ª–∞–π–Ω –∏–ª–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ</p>
            <hr>
            <h4>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã</h4>
            <p>üì± +7 (999) 123-45-67<br>
            üìß hello@psychologist.ru<br>
            üåø psychologist.ru</p>
        </div>
        """, unsafe_allow_html=True)

# ============================================================================
# –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê: –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢
# ============================================================================

else:
    st.title("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    client_info = get_client_info(st.session_state.client_phone)
    st.markdown(f"""
    <div class="welcome-header">
        <h1>üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {st.session_state.client_name}!</h1>
        <p>–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!</p>
    </div>
    """, unsafe_allow_html=True)
    
    # ========== –¢–ï–ö–£–©–ê–Ø –ó–ê–ü–ò–°–¨ ==========
    if st.session_state.current_tab == "üëÅÔ∏è –¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å":
        st.markdown("### üëÅÔ∏è –¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å")
        
        upcoming = get_upcoming_client_booking(st.session_state.client_phone)
        
        if upcoming:
            booking_id, name, date, time, notes, status = upcoming
            time_until = calculate_time_until(date, time)
            
            st.markdown(f"""
            <div class="booking-card">
                <h3>üïê –ë–ª–∏–∂–∞–π—à–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</h3>
                <p><strong>üìÖ –î–∞—Ç–∞:</strong> {format_date(date)}</p>
                <p><strong>üïê –í—Ä–µ–º—è:</strong> {time}</p>
                <p><strong>‚è±Ô∏è –î–æ –Ω–∞—á–∞–ª–∞:</strong> {format_timedelta(time_until)}</p>
                {f"<p><strong>üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> {notes}</p>" if notes else ""}
            </div>
            """, unsafe_allow_html=True)
            
            if time_until.total_seconds() > BOOKING_RULES["MIN_CANCEL_MINUTES"] * 60:
                if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", type="secondary", use_container_width=True):
                    success, message = cancel_booking(booking_id, st.session_state.client_phone)
                    if success:
                        st.success(message)
                        st.rerun()
                    else:
                        st.error(message)
            else:
                st.warning(f"‚ö†Ô∏è –û—Ç–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –∑–∞ {BOOKING_RULES['MIN_CANCEL_MINUTES']}+ –º–∏–Ω—É—Ç")
        else:
            st.info("üì≠ –ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π")
    
    # ========== –ò–°–¢–û–†–ò–Ø ==========
    elif st.session_state.current_tab == "üìä –ò—Å—Ç–æ—Ä–∏—è":
        st.markdown("### üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π")
        
        bookings = get_client_bookings(st.session_state.client_phone)
        
        if not bookings.empty:
            for idx, row in bookings.iterrows():
                status_info = STATUS_DISPLAY.get(row['status'], STATUS_DISPLAY['confirmed'])
                date_formatted = format_date(row['booking_date'])
                
                st.markdown(f"""
                <div class="booking-card">
                    <h4>{status_info['emoji']} {date_formatted} –≤ {row['booking_time']}</h4>
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span style="color: {status_info['color']}">{status_info['text']}</span></p>
                    {f"<p><strong>üí≠</strong> {row['notes']}</p>" if row['notes'] else ""}
                </div>
                """, unsafe_allow_html=True)
        else:
            st.info("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
    
    # ========== –ü–†–û–§–ò–õ–¨ ==========
    elif st.session_state.current_tab == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        st.markdown("### üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        
        if client_info:
            with st.form("profile_form"):
                col1, col2 = st.columns(2)
                with col1:
                    new_name = st.text_input("üë§ –ò–º—è *", value=client_info['name'])
                    new_email = st.text_input("üìß Email", value=client_info['email'] or "")
                with col2:
                    st.text_input("üì± –¢–µ–ª–µ—Ñ–æ–Ω", value=st.session_state.client_phone, disabled=True)
                    new_telegram = st.text_input("üí¨ Telegram", value=client_info['telegram'] or "")
                
                submit = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True)
                
                if submit and new_name.strip():
                    if update_client_profile(st.session_state.client_phone, name=new_name.strip(),
                                           email=new_email.strip() or None, 
                                           telegram=new_telegram.strip() or None):
                        st.success("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!")
                        st.session_state.client_name = new_name.strip()
                        st.rerun()
    
    # ========== –ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨ ==========
    else:
        st.markdown("### üìÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å")
        
        if has_active_booking(st.session_state.client_phone):
            st.warning("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å'.")
        else:
            col1, col2 = st.columns([2, 1])
            
            with col1:
                selected_date = st.date_input("–î–∞—Ç–∞", min_value=datetime.now().date(),
                                            max_value=datetime.now().date() + timedelta(days=30),
                                            format="DD.MM.YYYY")
                
                available_slots = get_available_slots(str(selected_date))
                selected_time = render_time_slots(available_slots, "client_slot")
                
                if selected_time:
                    st.success(f"‚úÖ {selected_date.strftime('%d.%m.%Y')} –≤ {selected_time}")
                    
                    with st.form("quick_booking"):
                        notes = st.text_area("üí≠ –¢–µ–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", height=80)
                        submit = st.form_submit_button("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", use_container_width=True)
                        
                        if submit:
                            success, message = create_booking(client_info['name'], 
                                                            st.session_state.client_phone,
                                                            client_info.get('email', ''),
                                                            client_info.get('telegram', ''),
                                                            str(selected_date), selected_time, notes)
                            if success:
                                st.balloons()
                                st.success("üéâ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞!")
                                st.rerun()
                            else:
                                st.error(message)
            
            with col2:
                settings = get_settings()
                st.markdown(f"""
                <div class="info-box">
                    <h4>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                    <p><strong>‚è∞ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:</strong><br>{settings[0]} - {settings[1]}</p>
                    <p><strong>‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong><br>{settings[2]} –º–∏–Ω—É—Ç</p>
                </div>
                """, unsafe_allow_html=True)