# telegram_helper.py
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ Streamlit

import asyncio
from telegram import Bot

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å bot.py)
BOT_TOKEN = "1781045290:AAHpvq7zsIcew9MOPtdHbV-l36rHCQOD2Mk"

def get_chat_id_by_username(username):
    """–ü–æ–ª—É—á–∏—Ç—å chat_id –ø–æ username –∏–∑ –±–∞–∑—ã"""
    import sqlite3
    conn = sqlite3.connect('bookings.db')
    c = conn.cursor()
    
    username_clean = username.lower().replace('@', '')
    c.execute("SELECT chat_id FROM telegram_users WHERE username = ?", (username_clean,))
    result = c.fetchone()
    conn.close()
    
    return result[0] if result else None

async def send_telegram_message(chat_id, message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        bot = Bot(token=BOT_TOKEN)
        await bot.send_message(chat_id=chat_id, text=message)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def notify_new_booking(username, booking_details):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
    if not username:
        return False
    
    chat_id = get_chat_id_by_username(username)
    if not chat_id:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram")
        return False
    
    from datetime import datetime
    date_obj = datetime.strptime(booking_details['date'], '%Y-%m-%d')
    date_formatted = date_obj.strftime('%d.%m.%Y')
    
    message = (
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n"
        f"üìÖ –î–∞—Ç–∞: {date_formatted}\n"
        f"üïê –í—Ä–µ–º—è: {booking_details['time']}\n"
        f"üë§ –ò–º—è: {booking_details['name']}\n"
    )
    
    if booking_details.get('notes'):
        message += f"\nüí¨ {booking_details['notes']}\n"
    
    message += "\n‚ùóÔ∏è –Ø –ø—Ä–∏—à–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –≤—Å—Ç—Ä–µ—á–∏!"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result = loop.run_until_complete(send_telegram_message(chat_id, message))
        loop.close()
        return result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False

def notify_booking_cancelled(username, booking_details):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏"""
    if not username:
        return False
    
    chat_id = get_chat_id_by_username(username)
    if not chat_id:
        return False
    
    from datetime import datetime
    date_obj = datetime.strptime(booking_details['date'], '%Y-%m-%d')
    date_formatted = date_obj.strftime('%d.%m.%Y')
    
    message = (
        "‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º\n\n"
        f"üìÖ –î–∞—Ç–∞: {date_formatted}\n"
        f"üïê –í—Ä–µ–º—è: {booking_details['time']}\n\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
    )
    
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result = loop.run_until_complete(send_telegram_message(chat_id, message))
        loop.close()
        return result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False